// Code generated by thriftgo (0.2.3). DO NOT EDIT.

package blog

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"my_blog/biz/hertz_gen/blog/api"
	"my_blog/biz/hertz_gen/blog/page"
)

type BlogService interface {
	// =============================================================== API ===============================================================
	// ==========用户相关=============
	// 登录
	LoginAPI(ctx context.Context, request *api.LoginRequest) (r *api.LoginResponse, err error)
	// 获取用户信息
	GetUserInfoAPI(ctx context.Context) (r *api.GetUserInfoAPIResponse, err error)
	// ==========标签相关=============
	// 创建标签
	CreateTagAPI(ctx context.Context, request *api.CreateTagAPIRequest) (r *api.CreateTagAPIResponse, err error)
	// 更新标签
	UpdateTagAPI(ctx context.Context, request *api.UpdateTagAPIRequest) (r *api.CommonResponse, err error)
	// 删除标签
	DeleteTagAPI(ctx context.Context, request *api.DeleteTagAPIRequest) (r *api.CommonResponse, err error)
	// 获取标签列表
	GetTagListAPI(ctx context.Context, request *api.GetTagListAPIRequest) (r *api.GetTagListAPIResponse, err error)
	// ==========分类相关=============
	// 创建分类
	CreateCategoryAPI(ctx context.Context, request *api.CreateCategoryAPIRequest) (r *api.CommonResponse, err error)
	// 更新分类
	UpdateCategoryAPI(ctx context.Context, request *api.UpdateCategoryAPIRequest) (r *api.CommonResponse, err error)
	// 删除分类
	DeleteCategoryAPI(ctx context.Context, request *api.DeleteCategoryAPIRequest) (r *api.CommonResponse, err error)
	// 更新分类排序
	UpdateCategoryOrderAPI(ctx context.Context, request *api.UpdateCategoryOrderAPIRequest) (r *api.CommonResponse, err error)
	// 获取分类列表
	GetCategoryListAPI(ctx context.Context) (r *api.GetCategoryListAPIResponse, err error)
	// ==========文章相关=============
	// 创建文章
	CreatePostAPI(ctx context.Context, request *api.CreatePostAPIRequest) (r *api.CreatePostAPIResponse, err error)
	// 获取文章
	GetPostAPI(ctx context.Context, request *api.GetPostAPIRequest) (r *api.GetPostAPIResponse, err error)
	// 更新文章
	UpdatePostAPI(ctx context.Context, request *api.UpdatePostAPIRequest) (r *api.CommonResponse, err error)
	// 更新文章状态
	UpdatePostStatusAPI(ctx context.Context, request *api.UpdatePostStatusAPIRequest) (r *api.CommonResponse, err error)
	// 获取文章列表
	GetPostListAPI(ctx context.Context, request *api.GetPostListAPIRequest) (r *api.GetPostListAPIResponse, err error)
	// 删除文章
	DeletePostAPI(ctx context.Context, request *api.DeletePostAPIRequest) (r *api.CommonResponse, err error)
	// ==========页面相关=============
	// 创建页面
	CreatePageAPI(ctx context.Context, request *api.CreatePageAPIRequest) (r *api.CreatePageAPIResponse, err error)
	// 获取页面
	GetPageAPI(ctx context.Context, request *api.GetPageAPIRequest) (r *api.GetPageAPIResponse, err error)
	// 更新页面
	UpdatePageAPI(ctx context.Context, request *api.UpdatePageAPIRequest) (r *api.CommonResponse, err error)
	// 获取页面列表
	GetPageListAPI(ctx context.Context) (r *api.GetPageListAPIResponse, err error)
	// 删除页面
	DeletePageAPI(ctx context.Context, request *api.DeletePageAPIRequest) (r *api.CommonResponse, err error)
	// ==========评论相关=============
	// 获取评论列表
	GetCommentListAdminAPI(ctx context.Context, request *api.GetCommentListAdminAPIRequest) (r *api.GetCommentListAdminAPIResponse, err error)
	// 管理员回复评论
	ReplyCommentAdminAPI(ctx context.Context, request *api.ReplyCommentAdminAPIRequest) (r *api.CommonResponse, err error)
	// 修改评论状态
	UpdateCommentStatusAdminAPI(ctx context.Context, request *api.UpdateCommentStatusAdminAPIRequest) (r *api.CommonResponse, err error)
	// 删除评论
	DeleteCommentAdminAPI(ctx context.Context, request *api.DeleteCommentAdminAPIRequest) (r *api.CommonResponse, err error)
	// ==========用户侧接口============
	// 搜索
	SearchAPI(ctx context.Context, request *api.SearchAPIRequest) (r *api.SearchAPIResponse, err error)
	// 获取评论列表
	GetCommentListAPI(ctx context.Context, request *api.GetCommentListAPIRequest) (r *api.GetCommentListAPIResponse, err error)
	// 评论文章
	CommentArticleAPI(ctx context.Context, requset *api.CommentArticleAPIRequest) (r *api.CommentArticleAPIResponse, err error)
	// 回复评论
	ReplyCommentAPI(ctx context.Context, requset *api.ReplyCommentAPIRequest) (r *api.ReplyCommentAPIResponse, err error)
	// 获取验证码
	GetCaptchaAPI(ctx context.Context) (r *api.GetCaptchaAPIResponse, err error)
	// =============================================================== Page ===============================================================
	// =============文章列表==============
	// 首页
	IndexPage(ctx context.Context) (r *page.PostListPageResp, err error)

	IndexByPaginationPage(ctx context.Context, request *page.PostListPageRequest) (r *page.PostListPageResp, err error)
	// 分类
	CategoryPostPage(ctx context.Context, request *page.PostListPageRequest) (r *page.PostListPageResp, err error)

	CategoryPostByPaginationPage(ctx context.Context, request *page.PostListPageRequest) (r *page.PostListPageResp, err error)
	// 标签
	TagPostPage(ctx context.Context, request *page.PostListPageRequest) (r *page.PostListPageResp, err error)

	TagPostByPaginationPage(ctx context.Context, request *page.PostListPageRequest) (r *page.PostListPageResp, err error)
	// =============文章归档==============
	ArchivesPage(ctx context.Context) (r *page.ArchivesPageResp, err error)
	// =============标签云================
	TagsPage(ctx context.Context) (r *page.TermsPageResp, err error)

	CategoriesPage(ctx context.Context) (r *page.TermsPageResp, err error)
	// ==============单页面=================
	SearchPage(ctx context.Context) (r *page.BasicPageResp, err error)
	// ==============文章页=================
	PostPage(ctx context.Context, request *page.PostPageRequest) (r *page.PostPageResponse, err error)

	PagePage(ctx context.Context, request *page.PagePageRequest) (r *page.PagePageResponse, err error)
}

type BlogServiceClient struct {
	c thrift.TClient
}

func NewBlogServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BlogServiceClient {
	return &BlogServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewBlogServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BlogServiceClient {
	return &BlogServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewBlogServiceClient(c thrift.TClient) *BlogServiceClient {
	return &BlogServiceClient{
		c: c,
	}
}

func (p *BlogServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *BlogServiceClient) LoginAPI(ctx context.Context, request *api.LoginRequest) (r *api.LoginResponse, err error) {
	var _args BlogServiceLoginAPIArgs
	_args.Request = request
	var _result BlogServiceLoginAPIResult
	if err = p.Client_().Call(ctx, "LoginAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) GetUserInfoAPI(ctx context.Context) (r *api.GetUserInfoAPIResponse, err error) {
	var _args BlogServiceGetUserInfoAPIArgs
	var _result BlogServiceGetUserInfoAPIResult
	if err = p.Client_().Call(ctx, "GetUserInfoAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) CreateTagAPI(ctx context.Context, request *api.CreateTagAPIRequest) (r *api.CreateTagAPIResponse, err error) {
	var _args BlogServiceCreateTagAPIArgs
	_args.Request = request
	var _result BlogServiceCreateTagAPIResult
	if err = p.Client_().Call(ctx, "CreateTagAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) UpdateTagAPI(ctx context.Context, request *api.UpdateTagAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceUpdateTagAPIArgs
	_args.Request = request
	var _result BlogServiceUpdateTagAPIResult
	if err = p.Client_().Call(ctx, "UpdateTagAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) DeleteTagAPI(ctx context.Context, request *api.DeleteTagAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceDeleteTagAPIArgs
	_args.Request = request
	var _result BlogServiceDeleteTagAPIResult
	if err = p.Client_().Call(ctx, "DeleteTagAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) GetTagListAPI(ctx context.Context, request *api.GetTagListAPIRequest) (r *api.GetTagListAPIResponse, err error) {
	var _args BlogServiceGetTagListAPIArgs
	_args.Request = request
	var _result BlogServiceGetTagListAPIResult
	if err = p.Client_().Call(ctx, "GetTagListAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) CreateCategoryAPI(ctx context.Context, request *api.CreateCategoryAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceCreateCategoryAPIArgs
	_args.Request = request
	var _result BlogServiceCreateCategoryAPIResult
	if err = p.Client_().Call(ctx, "CreateCategoryAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) UpdateCategoryAPI(ctx context.Context, request *api.UpdateCategoryAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceUpdateCategoryAPIArgs
	_args.Request = request
	var _result BlogServiceUpdateCategoryAPIResult
	if err = p.Client_().Call(ctx, "UpdateCategoryAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) DeleteCategoryAPI(ctx context.Context, request *api.DeleteCategoryAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceDeleteCategoryAPIArgs
	_args.Request = request
	var _result BlogServiceDeleteCategoryAPIResult
	if err = p.Client_().Call(ctx, "DeleteCategoryAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) UpdateCategoryOrderAPI(ctx context.Context, request *api.UpdateCategoryOrderAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceUpdateCategoryOrderAPIArgs
	_args.Request = request
	var _result BlogServiceUpdateCategoryOrderAPIResult
	if err = p.Client_().Call(ctx, "UpdateCategoryOrderAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) GetCategoryListAPI(ctx context.Context) (r *api.GetCategoryListAPIResponse, err error) {
	var _args BlogServiceGetCategoryListAPIArgs
	var _result BlogServiceGetCategoryListAPIResult
	if err = p.Client_().Call(ctx, "GetCategoryListAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) CreatePostAPI(ctx context.Context, request *api.CreatePostAPIRequest) (r *api.CreatePostAPIResponse, err error) {
	var _args BlogServiceCreatePostAPIArgs
	_args.Request = request
	var _result BlogServiceCreatePostAPIResult
	if err = p.Client_().Call(ctx, "CreatePostAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) GetPostAPI(ctx context.Context, request *api.GetPostAPIRequest) (r *api.GetPostAPIResponse, err error) {
	var _args BlogServiceGetPostAPIArgs
	_args.Request = request
	var _result BlogServiceGetPostAPIResult
	if err = p.Client_().Call(ctx, "GetPostAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) UpdatePostAPI(ctx context.Context, request *api.UpdatePostAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceUpdatePostAPIArgs
	_args.Request = request
	var _result BlogServiceUpdatePostAPIResult
	if err = p.Client_().Call(ctx, "UpdatePostAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) UpdatePostStatusAPI(ctx context.Context, request *api.UpdatePostStatusAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceUpdatePostStatusAPIArgs
	_args.Request = request
	var _result BlogServiceUpdatePostStatusAPIResult
	if err = p.Client_().Call(ctx, "UpdatePostStatusAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) GetPostListAPI(ctx context.Context, request *api.GetPostListAPIRequest) (r *api.GetPostListAPIResponse, err error) {
	var _args BlogServiceGetPostListAPIArgs
	_args.Request = request
	var _result BlogServiceGetPostListAPIResult
	if err = p.Client_().Call(ctx, "GetPostListAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) DeletePostAPI(ctx context.Context, request *api.DeletePostAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceDeletePostAPIArgs
	_args.Request = request
	var _result BlogServiceDeletePostAPIResult
	if err = p.Client_().Call(ctx, "DeletePostAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) CreatePageAPI(ctx context.Context, request *api.CreatePageAPIRequest) (r *api.CreatePageAPIResponse, err error) {
	var _args BlogServiceCreatePageAPIArgs
	_args.Request = request
	var _result BlogServiceCreatePageAPIResult
	if err = p.Client_().Call(ctx, "CreatePageAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) GetPageAPI(ctx context.Context, request *api.GetPageAPIRequest) (r *api.GetPageAPIResponse, err error) {
	var _args BlogServiceGetPageAPIArgs
	_args.Request = request
	var _result BlogServiceGetPageAPIResult
	if err = p.Client_().Call(ctx, "GetPageAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) UpdatePageAPI(ctx context.Context, request *api.UpdatePageAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceUpdatePageAPIArgs
	_args.Request = request
	var _result BlogServiceUpdatePageAPIResult
	if err = p.Client_().Call(ctx, "UpdatePageAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) GetPageListAPI(ctx context.Context) (r *api.GetPageListAPIResponse, err error) {
	var _args BlogServiceGetPageListAPIArgs
	var _result BlogServiceGetPageListAPIResult
	if err = p.Client_().Call(ctx, "GetPageListAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) DeletePageAPI(ctx context.Context, request *api.DeletePageAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceDeletePageAPIArgs
	_args.Request = request
	var _result BlogServiceDeletePageAPIResult
	if err = p.Client_().Call(ctx, "DeletePageAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) GetCommentListAdminAPI(ctx context.Context, request *api.GetCommentListAdminAPIRequest) (r *api.GetCommentListAdminAPIResponse, err error) {
	var _args BlogServiceGetCommentListAdminAPIArgs
	_args.Request = request
	var _result BlogServiceGetCommentListAdminAPIResult
	if err = p.Client_().Call(ctx, "GetCommentListAdminAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) ReplyCommentAdminAPI(ctx context.Context, request *api.ReplyCommentAdminAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceReplyCommentAdminAPIArgs
	_args.Request = request
	var _result BlogServiceReplyCommentAdminAPIResult
	if err = p.Client_().Call(ctx, "ReplyCommentAdminAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) UpdateCommentStatusAdminAPI(ctx context.Context, request *api.UpdateCommentStatusAdminAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceUpdateCommentStatusAdminAPIArgs
	_args.Request = request
	var _result BlogServiceUpdateCommentStatusAdminAPIResult
	if err = p.Client_().Call(ctx, "UpdateCommentStatusAdminAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) DeleteCommentAdminAPI(ctx context.Context, request *api.DeleteCommentAdminAPIRequest) (r *api.CommonResponse, err error) {
	var _args BlogServiceDeleteCommentAdminAPIArgs
	_args.Request = request
	var _result BlogServiceDeleteCommentAdminAPIResult
	if err = p.Client_().Call(ctx, "DeleteCommentAdminAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) SearchAPI(ctx context.Context, request *api.SearchAPIRequest) (r *api.SearchAPIResponse, err error) {
	var _args BlogServiceSearchAPIArgs
	_args.Request = request
	var _result BlogServiceSearchAPIResult
	if err = p.Client_().Call(ctx, "SearchAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) GetCommentListAPI(ctx context.Context, request *api.GetCommentListAPIRequest) (r *api.GetCommentListAPIResponse, err error) {
	var _args BlogServiceGetCommentListAPIArgs
	_args.Request = request
	var _result BlogServiceGetCommentListAPIResult
	if err = p.Client_().Call(ctx, "GetCommentListAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) CommentArticleAPI(ctx context.Context, requset *api.CommentArticleAPIRequest) (r *api.CommentArticleAPIResponse, err error) {
	var _args BlogServiceCommentArticleAPIArgs
	_args.Requset = requset
	var _result BlogServiceCommentArticleAPIResult
	if err = p.Client_().Call(ctx, "CommentArticleAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) ReplyCommentAPI(ctx context.Context, requset *api.ReplyCommentAPIRequest) (r *api.ReplyCommentAPIResponse, err error) {
	var _args BlogServiceReplyCommentAPIArgs
	_args.Requset = requset
	var _result BlogServiceReplyCommentAPIResult
	if err = p.Client_().Call(ctx, "ReplyCommentAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) GetCaptchaAPI(ctx context.Context) (r *api.GetCaptchaAPIResponse, err error) {
	var _args BlogServiceGetCaptchaAPIArgs
	var _result BlogServiceGetCaptchaAPIResult
	if err = p.Client_().Call(ctx, "GetCaptchaAPI", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) IndexPage(ctx context.Context) (r *page.PostListPageResp, err error) {
	var _args BlogServiceIndexPageArgs
	var _result BlogServiceIndexPageResult
	if err = p.Client_().Call(ctx, "IndexPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) IndexByPaginationPage(ctx context.Context, request *page.PostListPageRequest) (r *page.PostListPageResp, err error) {
	var _args BlogServiceIndexByPaginationPageArgs
	_args.Request = request
	var _result BlogServiceIndexByPaginationPageResult
	if err = p.Client_().Call(ctx, "IndexByPaginationPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) CategoryPostPage(ctx context.Context, request *page.PostListPageRequest) (r *page.PostListPageResp, err error) {
	var _args BlogServiceCategoryPostPageArgs
	_args.Request = request
	var _result BlogServiceCategoryPostPageResult
	if err = p.Client_().Call(ctx, "CategoryPostPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) CategoryPostByPaginationPage(ctx context.Context, request *page.PostListPageRequest) (r *page.PostListPageResp, err error) {
	var _args BlogServiceCategoryPostByPaginationPageArgs
	_args.Request = request
	var _result BlogServiceCategoryPostByPaginationPageResult
	if err = p.Client_().Call(ctx, "CategoryPostByPaginationPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) TagPostPage(ctx context.Context, request *page.PostListPageRequest) (r *page.PostListPageResp, err error) {
	var _args BlogServiceTagPostPageArgs
	_args.Request = request
	var _result BlogServiceTagPostPageResult
	if err = p.Client_().Call(ctx, "TagPostPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) TagPostByPaginationPage(ctx context.Context, request *page.PostListPageRequest) (r *page.PostListPageResp, err error) {
	var _args BlogServiceTagPostByPaginationPageArgs
	_args.Request = request
	var _result BlogServiceTagPostByPaginationPageResult
	if err = p.Client_().Call(ctx, "TagPostByPaginationPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) ArchivesPage(ctx context.Context) (r *page.ArchivesPageResp, err error) {
	var _args BlogServiceArchivesPageArgs
	var _result BlogServiceArchivesPageResult
	if err = p.Client_().Call(ctx, "ArchivesPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) TagsPage(ctx context.Context) (r *page.TermsPageResp, err error) {
	var _args BlogServiceTagsPageArgs
	var _result BlogServiceTagsPageResult
	if err = p.Client_().Call(ctx, "TagsPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) CategoriesPage(ctx context.Context) (r *page.TermsPageResp, err error) {
	var _args BlogServiceCategoriesPageArgs
	var _result BlogServiceCategoriesPageResult
	if err = p.Client_().Call(ctx, "CategoriesPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) SearchPage(ctx context.Context) (r *page.BasicPageResp, err error) {
	var _args BlogServiceSearchPageArgs
	var _result BlogServiceSearchPageResult
	if err = p.Client_().Call(ctx, "SearchPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) PostPage(ctx context.Context, request *page.PostPageRequest) (r *page.PostPageResponse, err error) {
	var _args BlogServicePostPageArgs
	_args.Request = request
	var _result BlogServicePostPageResult
	if err = p.Client_().Call(ctx, "PostPage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlogServiceClient) PagePage(ctx context.Context, request *page.PagePageRequest) (r *page.PagePageResponse, err error) {
	var _args BlogServicePagePageArgs
	_args.Request = request
	var _result BlogServicePagePageResult
	if err = p.Client_().Call(ctx, "PagePage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type BlogServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BlogService
}

func (p *BlogServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BlogServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BlogServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBlogServiceProcessor(handler BlogService) *BlogServiceProcessor {
	self := &BlogServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("LoginAPI", &blogServiceProcessorLoginAPI{handler: handler})
	self.AddToProcessorMap("GetUserInfoAPI", &blogServiceProcessorGetUserInfoAPI{handler: handler})
	self.AddToProcessorMap("CreateTagAPI", &blogServiceProcessorCreateTagAPI{handler: handler})
	self.AddToProcessorMap("UpdateTagAPI", &blogServiceProcessorUpdateTagAPI{handler: handler})
	self.AddToProcessorMap("DeleteTagAPI", &blogServiceProcessorDeleteTagAPI{handler: handler})
	self.AddToProcessorMap("GetTagListAPI", &blogServiceProcessorGetTagListAPI{handler: handler})
	self.AddToProcessorMap("CreateCategoryAPI", &blogServiceProcessorCreateCategoryAPI{handler: handler})
	self.AddToProcessorMap("UpdateCategoryAPI", &blogServiceProcessorUpdateCategoryAPI{handler: handler})
	self.AddToProcessorMap("DeleteCategoryAPI", &blogServiceProcessorDeleteCategoryAPI{handler: handler})
	self.AddToProcessorMap("UpdateCategoryOrderAPI", &blogServiceProcessorUpdateCategoryOrderAPI{handler: handler})
	self.AddToProcessorMap("GetCategoryListAPI", &blogServiceProcessorGetCategoryListAPI{handler: handler})
	self.AddToProcessorMap("CreatePostAPI", &blogServiceProcessorCreatePostAPI{handler: handler})
	self.AddToProcessorMap("GetPostAPI", &blogServiceProcessorGetPostAPI{handler: handler})
	self.AddToProcessorMap("UpdatePostAPI", &blogServiceProcessorUpdatePostAPI{handler: handler})
	self.AddToProcessorMap("UpdatePostStatusAPI", &blogServiceProcessorUpdatePostStatusAPI{handler: handler})
	self.AddToProcessorMap("GetPostListAPI", &blogServiceProcessorGetPostListAPI{handler: handler})
	self.AddToProcessorMap("DeletePostAPI", &blogServiceProcessorDeletePostAPI{handler: handler})
	self.AddToProcessorMap("CreatePageAPI", &blogServiceProcessorCreatePageAPI{handler: handler})
	self.AddToProcessorMap("GetPageAPI", &blogServiceProcessorGetPageAPI{handler: handler})
	self.AddToProcessorMap("UpdatePageAPI", &blogServiceProcessorUpdatePageAPI{handler: handler})
	self.AddToProcessorMap("GetPageListAPI", &blogServiceProcessorGetPageListAPI{handler: handler})
	self.AddToProcessorMap("DeletePageAPI", &blogServiceProcessorDeletePageAPI{handler: handler})
	self.AddToProcessorMap("GetCommentListAdminAPI", &blogServiceProcessorGetCommentListAdminAPI{handler: handler})
	self.AddToProcessorMap("ReplyCommentAdminAPI", &blogServiceProcessorReplyCommentAdminAPI{handler: handler})
	self.AddToProcessorMap("UpdateCommentStatusAdminAPI", &blogServiceProcessorUpdateCommentStatusAdminAPI{handler: handler})
	self.AddToProcessorMap("DeleteCommentAdminAPI", &blogServiceProcessorDeleteCommentAdminAPI{handler: handler})
	self.AddToProcessorMap("SearchAPI", &blogServiceProcessorSearchAPI{handler: handler})
	self.AddToProcessorMap("GetCommentListAPI", &blogServiceProcessorGetCommentListAPI{handler: handler})
	self.AddToProcessorMap("CommentArticleAPI", &blogServiceProcessorCommentArticleAPI{handler: handler})
	self.AddToProcessorMap("ReplyCommentAPI", &blogServiceProcessorReplyCommentAPI{handler: handler})
	self.AddToProcessorMap("GetCaptchaAPI", &blogServiceProcessorGetCaptchaAPI{handler: handler})
	self.AddToProcessorMap("IndexPage", &blogServiceProcessorIndexPage{handler: handler})
	self.AddToProcessorMap("IndexByPaginationPage", &blogServiceProcessorIndexByPaginationPage{handler: handler})
	self.AddToProcessorMap("CategoryPostPage", &blogServiceProcessorCategoryPostPage{handler: handler})
	self.AddToProcessorMap("CategoryPostByPaginationPage", &blogServiceProcessorCategoryPostByPaginationPage{handler: handler})
	self.AddToProcessorMap("TagPostPage", &blogServiceProcessorTagPostPage{handler: handler})
	self.AddToProcessorMap("TagPostByPaginationPage", &blogServiceProcessorTagPostByPaginationPage{handler: handler})
	self.AddToProcessorMap("ArchivesPage", &blogServiceProcessorArchivesPage{handler: handler})
	self.AddToProcessorMap("TagsPage", &blogServiceProcessorTagsPage{handler: handler})
	self.AddToProcessorMap("CategoriesPage", &blogServiceProcessorCategoriesPage{handler: handler})
	self.AddToProcessorMap("SearchPage", &blogServiceProcessorSearchPage{handler: handler})
	self.AddToProcessorMap("PostPage", &blogServiceProcessorPostPage{handler: handler})
	self.AddToProcessorMap("PagePage", &blogServiceProcessorPagePage{handler: handler})
	return self
}
func (p *BlogServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type blogServiceProcessorLoginAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorLoginAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceLoginAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("LoginAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceLoginAPIResult{}
	var retval *api.LoginResponse
	if retval, err2 = p.handler.LoginAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing LoginAPI: "+err2.Error())
		oprot.WriteMessageBegin("LoginAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("LoginAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorGetUserInfoAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorGetUserInfoAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceGetUserInfoAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserInfoAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceGetUserInfoAPIResult{}
	var retval *api.GetUserInfoAPIResponse
	if retval, err2 = p.handler.GetUserInfoAPI(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserInfoAPI: "+err2.Error())
		oprot.WriteMessageBegin("GetUserInfoAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserInfoAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorCreateTagAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorCreateTagAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceCreateTagAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateTagAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceCreateTagAPIResult{}
	var retval *api.CreateTagAPIResponse
	if retval, err2 = p.handler.CreateTagAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateTagAPI: "+err2.Error())
		oprot.WriteMessageBegin("CreateTagAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateTagAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorUpdateTagAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorUpdateTagAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceUpdateTagAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateTagAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceUpdateTagAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.UpdateTagAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateTagAPI: "+err2.Error())
		oprot.WriteMessageBegin("UpdateTagAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateTagAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorDeleteTagAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorDeleteTagAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceDeleteTagAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteTagAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceDeleteTagAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.DeleteTagAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteTagAPI: "+err2.Error())
		oprot.WriteMessageBegin("DeleteTagAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteTagAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorGetTagListAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorGetTagListAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceGetTagListAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTagListAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceGetTagListAPIResult{}
	var retval *api.GetTagListAPIResponse
	if retval, err2 = p.handler.GetTagListAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTagListAPI: "+err2.Error())
		oprot.WriteMessageBegin("GetTagListAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTagListAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorCreateCategoryAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorCreateCategoryAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceCreateCategoryAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateCategoryAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceCreateCategoryAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.CreateCategoryAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateCategoryAPI: "+err2.Error())
		oprot.WriteMessageBegin("CreateCategoryAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateCategoryAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorUpdateCategoryAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorUpdateCategoryAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceUpdateCategoryAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCategoryAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceUpdateCategoryAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.UpdateCategoryAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCategoryAPI: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCategoryAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCategoryAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorDeleteCategoryAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorDeleteCategoryAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceDeleteCategoryAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCategoryAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceDeleteCategoryAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.DeleteCategoryAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCategoryAPI: "+err2.Error())
		oprot.WriteMessageBegin("DeleteCategoryAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCategoryAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorUpdateCategoryOrderAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorUpdateCategoryOrderAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceUpdateCategoryOrderAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCategoryOrderAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceUpdateCategoryOrderAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.UpdateCategoryOrderAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCategoryOrderAPI: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCategoryOrderAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCategoryOrderAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorGetCategoryListAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorGetCategoryListAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceGetCategoryListAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCategoryListAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceGetCategoryListAPIResult{}
	var retval *api.GetCategoryListAPIResponse
	if retval, err2 = p.handler.GetCategoryListAPI(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCategoryListAPI: "+err2.Error())
		oprot.WriteMessageBegin("GetCategoryListAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCategoryListAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorCreatePostAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorCreatePostAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceCreatePostAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreatePostAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceCreatePostAPIResult{}
	var retval *api.CreatePostAPIResponse
	if retval, err2 = p.handler.CreatePostAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreatePostAPI: "+err2.Error())
		oprot.WriteMessageBegin("CreatePostAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreatePostAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorGetPostAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorGetPostAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceGetPostAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPostAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceGetPostAPIResult{}
	var retval *api.GetPostAPIResponse
	if retval, err2 = p.handler.GetPostAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPostAPI: "+err2.Error())
		oprot.WriteMessageBegin("GetPostAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPostAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorUpdatePostAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorUpdatePostAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceUpdatePostAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdatePostAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceUpdatePostAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.UpdatePostAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePostAPI: "+err2.Error())
		oprot.WriteMessageBegin("UpdatePostAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdatePostAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorUpdatePostStatusAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorUpdatePostStatusAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceUpdatePostStatusAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdatePostStatusAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceUpdatePostStatusAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.UpdatePostStatusAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePostStatusAPI: "+err2.Error())
		oprot.WriteMessageBegin("UpdatePostStatusAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdatePostStatusAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorGetPostListAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorGetPostListAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceGetPostListAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPostListAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceGetPostListAPIResult{}
	var retval *api.GetPostListAPIResponse
	if retval, err2 = p.handler.GetPostListAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPostListAPI: "+err2.Error())
		oprot.WriteMessageBegin("GetPostListAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPostListAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorDeletePostAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorDeletePostAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceDeletePostAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePostAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceDeletePostAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.DeletePostAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePostAPI: "+err2.Error())
		oprot.WriteMessageBegin("DeletePostAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePostAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorCreatePageAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorCreatePageAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceCreatePageAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreatePageAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceCreatePageAPIResult{}
	var retval *api.CreatePageAPIResponse
	if retval, err2 = p.handler.CreatePageAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreatePageAPI: "+err2.Error())
		oprot.WriteMessageBegin("CreatePageAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreatePageAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorGetPageAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorGetPageAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceGetPageAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPageAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceGetPageAPIResult{}
	var retval *api.GetPageAPIResponse
	if retval, err2 = p.handler.GetPageAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPageAPI: "+err2.Error())
		oprot.WriteMessageBegin("GetPageAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPageAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorUpdatePageAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorUpdatePageAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceUpdatePageAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdatePageAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceUpdatePageAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.UpdatePageAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePageAPI: "+err2.Error())
		oprot.WriteMessageBegin("UpdatePageAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdatePageAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorGetPageListAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorGetPageListAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceGetPageListAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPageListAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceGetPageListAPIResult{}
	var retval *api.GetPageListAPIResponse
	if retval, err2 = p.handler.GetPageListAPI(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPageListAPI: "+err2.Error())
		oprot.WriteMessageBegin("GetPageListAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPageListAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorDeletePageAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorDeletePageAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceDeletePageAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePageAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceDeletePageAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.DeletePageAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePageAPI: "+err2.Error())
		oprot.WriteMessageBegin("DeletePageAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePageAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorGetCommentListAdminAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorGetCommentListAdminAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceGetCommentListAdminAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCommentListAdminAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceGetCommentListAdminAPIResult{}
	var retval *api.GetCommentListAdminAPIResponse
	if retval, err2 = p.handler.GetCommentListAdminAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCommentListAdminAPI: "+err2.Error())
		oprot.WriteMessageBegin("GetCommentListAdminAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCommentListAdminAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorReplyCommentAdminAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorReplyCommentAdminAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceReplyCommentAdminAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReplyCommentAdminAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceReplyCommentAdminAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.ReplyCommentAdminAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReplyCommentAdminAPI: "+err2.Error())
		oprot.WriteMessageBegin("ReplyCommentAdminAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ReplyCommentAdminAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorUpdateCommentStatusAdminAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorUpdateCommentStatusAdminAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceUpdateCommentStatusAdminAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCommentStatusAdminAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceUpdateCommentStatusAdminAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.UpdateCommentStatusAdminAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCommentStatusAdminAPI: "+err2.Error())
		oprot.WriteMessageBegin("UpdateCommentStatusAdminAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCommentStatusAdminAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorDeleteCommentAdminAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorDeleteCommentAdminAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceDeleteCommentAdminAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCommentAdminAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceDeleteCommentAdminAPIResult{}
	var retval *api.CommonResponse
	if retval, err2 = p.handler.DeleteCommentAdminAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCommentAdminAPI: "+err2.Error())
		oprot.WriteMessageBegin("DeleteCommentAdminAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCommentAdminAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorSearchAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorSearchAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceSearchAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SearchAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceSearchAPIResult{}
	var retval *api.SearchAPIResponse
	if retval, err2 = p.handler.SearchAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchAPI: "+err2.Error())
		oprot.WriteMessageBegin("SearchAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SearchAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorGetCommentListAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorGetCommentListAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceGetCommentListAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCommentListAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceGetCommentListAPIResult{}
	var retval *api.GetCommentListAPIResponse
	if retval, err2 = p.handler.GetCommentListAPI(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCommentListAPI: "+err2.Error())
		oprot.WriteMessageBegin("GetCommentListAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCommentListAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorCommentArticleAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorCommentArticleAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceCommentArticleAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CommentArticleAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceCommentArticleAPIResult{}
	var retval *api.CommentArticleAPIResponse
	if retval, err2 = p.handler.CommentArticleAPI(ctx, args.Requset); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CommentArticleAPI: "+err2.Error())
		oprot.WriteMessageBegin("CommentArticleAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CommentArticleAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorReplyCommentAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorReplyCommentAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceReplyCommentAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReplyCommentAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceReplyCommentAPIResult{}
	var retval *api.ReplyCommentAPIResponse
	if retval, err2 = p.handler.ReplyCommentAPI(ctx, args.Requset); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReplyCommentAPI: "+err2.Error())
		oprot.WriteMessageBegin("ReplyCommentAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ReplyCommentAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorGetCaptchaAPI struct {
	handler BlogService
}

func (p *blogServiceProcessorGetCaptchaAPI) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceGetCaptchaAPIArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCaptchaAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceGetCaptchaAPIResult{}
	var retval *api.GetCaptchaAPIResponse
	if retval, err2 = p.handler.GetCaptchaAPI(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCaptchaAPI: "+err2.Error())
		oprot.WriteMessageBegin("GetCaptchaAPI", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCaptchaAPI", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorIndexPage struct {
	handler BlogService
}

func (p *blogServiceProcessorIndexPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceIndexPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IndexPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceIndexPageResult{}
	var retval *page.PostListPageResp
	if retval, err2 = p.handler.IndexPage(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IndexPage: "+err2.Error())
		oprot.WriteMessageBegin("IndexPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("IndexPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorIndexByPaginationPage struct {
	handler BlogService
}

func (p *blogServiceProcessorIndexByPaginationPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceIndexByPaginationPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IndexByPaginationPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceIndexByPaginationPageResult{}
	var retval *page.PostListPageResp
	if retval, err2 = p.handler.IndexByPaginationPage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IndexByPaginationPage: "+err2.Error())
		oprot.WriteMessageBegin("IndexByPaginationPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("IndexByPaginationPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorCategoryPostPage struct {
	handler BlogService
}

func (p *blogServiceProcessorCategoryPostPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceCategoryPostPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CategoryPostPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceCategoryPostPageResult{}
	var retval *page.PostListPageResp
	if retval, err2 = p.handler.CategoryPostPage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CategoryPostPage: "+err2.Error())
		oprot.WriteMessageBegin("CategoryPostPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CategoryPostPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorCategoryPostByPaginationPage struct {
	handler BlogService
}

func (p *blogServiceProcessorCategoryPostByPaginationPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceCategoryPostByPaginationPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CategoryPostByPaginationPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceCategoryPostByPaginationPageResult{}
	var retval *page.PostListPageResp
	if retval, err2 = p.handler.CategoryPostByPaginationPage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CategoryPostByPaginationPage: "+err2.Error())
		oprot.WriteMessageBegin("CategoryPostByPaginationPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CategoryPostByPaginationPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorTagPostPage struct {
	handler BlogService
}

func (p *blogServiceProcessorTagPostPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceTagPostPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TagPostPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceTagPostPageResult{}
	var retval *page.PostListPageResp
	if retval, err2 = p.handler.TagPostPage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TagPostPage: "+err2.Error())
		oprot.WriteMessageBegin("TagPostPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("TagPostPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorTagPostByPaginationPage struct {
	handler BlogService
}

func (p *blogServiceProcessorTagPostByPaginationPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceTagPostByPaginationPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TagPostByPaginationPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceTagPostByPaginationPageResult{}
	var retval *page.PostListPageResp
	if retval, err2 = p.handler.TagPostByPaginationPage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TagPostByPaginationPage: "+err2.Error())
		oprot.WriteMessageBegin("TagPostByPaginationPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("TagPostByPaginationPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorArchivesPage struct {
	handler BlogService
}

func (p *blogServiceProcessorArchivesPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceArchivesPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ArchivesPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceArchivesPageResult{}
	var retval *page.ArchivesPageResp
	if retval, err2 = p.handler.ArchivesPage(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ArchivesPage: "+err2.Error())
		oprot.WriteMessageBegin("ArchivesPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ArchivesPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorTagsPage struct {
	handler BlogService
}

func (p *blogServiceProcessorTagsPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceTagsPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TagsPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceTagsPageResult{}
	var retval *page.TermsPageResp
	if retval, err2 = p.handler.TagsPage(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TagsPage: "+err2.Error())
		oprot.WriteMessageBegin("TagsPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("TagsPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorCategoriesPage struct {
	handler BlogService
}

func (p *blogServiceProcessorCategoriesPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceCategoriesPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CategoriesPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceCategoriesPageResult{}
	var retval *page.TermsPageResp
	if retval, err2 = p.handler.CategoriesPage(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CategoriesPage: "+err2.Error())
		oprot.WriteMessageBegin("CategoriesPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CategoriesPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorSearchPage struct {
	handler BlogService
}

func (p *blogServiceProcessorSearchPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServiceSearchPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SearchPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServiceSearchPageResult{}
	var retval *page.BasicPageResp
	if retval, err2 = p.handler.SearchPage(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchPage: "+err2.Error())
		oprot.WriteMessageBegin("SearchPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SearchPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorPostPage struct {
	handler BlogService
}

func (p *blogServiceProcessorPostPage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServicePostPageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PostPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServicePostPageResult{}
	var retval *page.PostPageResponse
	if retval, err2 = p.handler.PostPage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PostPage: "+err2.Error())
		oprot.WriteMessageBegin("PostPage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PostPage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blogServiceProcessorPagePage struct {
	handler BlogService
}

func (p *blogServiceProcessorPagePage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlogServicePagePageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PagePage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlogServicePagePageResult{}
	var retval *page.PagePageResponse
	if retval, err2 = p.handler.PagePage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PagePage: "+err2.Error())
		oprot.WriteMessageBegin("PagePage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PagePage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type BlogServiceLoginAPIArgs struct {
	Request *api.LoginRequest `thrift:"request,1"`
}

func NewBlogServiceLoginAPIArgs() *BlogServiceLoginAPIArgs {
	return &BlogServiceLoginAPIArgs{}
}

var BlogServiceLoginAPIArgs_Request_DEFAULT *api.LoginRequest

func (p *BlogServiceLoginAPIArgs) GetRequest() (v *api.LoginRequest) {
	if !p.IsSetRequest() {
		return BlogServiceLoginAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceLoginAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceLoginAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceLoginAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceLoginAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceLoginAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewLoginRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceLoginAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceLoginAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceLoginAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceLoginAPIArgs(%+v)", *p)
}

type BlogServiceLoginAPIResult struct {
	Success *api.LoginResponse `thrift:"success,0,optional"`
}

func NewBlogServiceLoginAPIResult() *BlogServiceLoginAPIResult {
	return &BlogServiceLoginAPIResult{}
}

var BlogServiceLoginAPIResult_Success_DEFAULT *api.LoginResponse

func (p *BlogServiceLoginAPIResult) GetSuccess() (v *api.LoginResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceLoginAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceLoginAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceLoginAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceLoginAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceLoginAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceLoginAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewLoginResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceLoginAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoginAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceLoginAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceLoginAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceLoginAPIResult(%+v)", *p)
}

type BlogServiceGetUserInfoAPIArgs struct {
}

func NewBlogServiceGetUserInfoAPIArgs() *BlogServiceGetUserInfoAPIArgs {
	return &BlogServiceGetUserInfoAPIArgs{}
}

var fieldIDToName_BlogServiceGetUserInfoAPIArgs = map[int16]string{}

func (p *BlogServiceGetUserInfoAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetUserInfoAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetUserInfoAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetUserInfoAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetUserInfoAPIArgs(%+v)", *p)
}

type BlogServiceGetUserInfoAPIResult struct {
	Success *api.GetUserInfoAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceGetUserInfoAPIResult() *BlogServiceGetUserInfoAPIResult {
	return &BlogServiceGetUserInfoAPIResult{}
}

var BlogServiceGetUserInfoAPIResult_Success_DEFAULT *api.GetUserInfoAPIResponse

func (p *BlogServiceGetUserInfoAPIResult) GetSuccess() (v *api.GetUserInfoAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceGetUserInfoAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceGetUserInfoAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceGetUserInfoAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceGetUserInfoAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetUserInfoAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetUserInfoAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewGetUserInfoAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetUserInfoAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserInfoAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetUserInfoAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceGetUserInfoAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetUserInfoAPIResult(%+v)", *p)
}

type BlogServiceCreateTagAPIArgs struct {
	Request *api.CreateTagAPIRequest `thrift:"request,1"`
}

func NewBlogServiceCreateTagAPIArgs() *BlogServiceCreateTagAPIArgs {
	return &BlogServiceCreateTagAPIArgs{}
}

var BlogServiceCreateTagAPIArgs_Request_DEFAULT *api.CreateTagAPIRequest

func (p *BlogServiceCreateTagAPIArgs) GetRequest() (v *api.CreateTagAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceCreateTagAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceCreateTagAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceCreateTagAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceCreateTagAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCreateTagAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCreateTagAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewCreateTagAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCreateTagAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTagAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCreateTagAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceCreateTagAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCreateTagAPIArgs(%+v)", *p)
}

type BlogServiceCreateTagAPIResult struct {
	Success *api.CreateTagAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceCreateTagAPIResult() *BlogServiceCreateTagAPIResult {
	return &BlogServiceCreateTagAPIResult{}
}

var BlogServiceCreateTagAPIResult_Success_DEFAULT *api.CreateTagAPIResponse

func (p *BlogServiceCreateTagAPIResult) GetSuccess() (v *api.CreateTagAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceCreateTagAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceCreateTagAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceCreateTagAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceCreateTagAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCreateTagAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCreateTagAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCreateTagAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCreateTagAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTagAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCreateTagAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceCreateTagAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCreateTagAPIResult(%+v)", *p)
}

type BlogServiceUpdateTagAPIArgs struct {
	Request *api.UpdateTagAPIRequest `thrift:"request,1"`
}

func NewBlogServiceUpdateTagAPIArgs() *BlogServiceUpdateTagAPIArgs {
	return &BlogServiceUpdateTagAPIArgs{}
}

var BlogServiceUpdateTagAPIArgs_Request_DEFAULT *api.UpdateTagAPIRequest

func (p *BlogServiceUpdateTagAPIArgs) GetRequest() (v *api.UpdateTagAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceUpdateTagAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceUpdateTagAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceUpdateTagAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceUpdateTagAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdateTagAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdateTagAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewUpdateTagAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdateTagAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTagAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdateTagAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceUpdateTagAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdateTagAPIArgs(%+v)", *p)
}

type BlogServiceUpdateTagAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceUpdateTagAPIResult() *BlogServiceUpdateTagAPIResult {
	return &BlogServiceUpdateTagAPIResult{}
}

var BlogServiceUpdateTagAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceUpdateTagAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceUpdateTagAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceUpdateTagAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceUpdateTagAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceUpdateTagAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdateTagAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdateTagAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdateTagAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTagAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdateTagAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceUpdateTagAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdateTagAPIResult(%+v)", *p)
}

type BlogServiceDeleteTagAPIArgs struct {
	Request *api.DeleteTagAPIRequest `thrift:"request,1"`
}

func NewBlogServiceDeleteTagAPIArgs() *BlogServiceDeleteTagAPIArgs {
	return &BlogServiceDeleteTagAPIArgs{}
}

var BlogServiceDeleteTagAPIArgs_Request_DEFAULT *api.DeleteTagAPIRequest

func (p *BlogServiceDeleteTagAPIArgs) GetRequest() (v *api.DeleteTagAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceDeleteTagAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceDeleteTagAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceDeleteTagAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceDeleteTagAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceDeleteTagAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceDeleteTagAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewDeleteTagAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceDeleteTagAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTagAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceDeleteTagAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceDeleteTagAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceDeleteTagAPIArgs(%+v)", *p)
}

type BlogServiceDeleteTagAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceDeleteTagAPIResult() *BlogServiceDeleteTagAPIResult {
	return &BlogServiceDeleteTagAPIResult{}
}

var BlogServiceDeleteTagAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceDeleteTagAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceDeleteTagAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceDeleteTagAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceDeleteTagAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceDeleteTagAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceDeleteTagAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceDeleteTagAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceDeleteTagAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteTagAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceDeleteTagAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceDeleteTagAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceDeleteTagAPIResult(%+v)", *p)
}

type BlogServiceGetTagListAPIArgs struct {
	Request *api.GetTagListAPIRequest `thrift:"request,1"`
}

func NewBlogServiceGetTagListAPIArgs() *BlogServiceGetTagListAPIArgs {
	return &BlogServiceGetTagListAPIArgs{}
}

var BlogServiceGetTagListAPIArgs_Request_DEFAULT *api.GetTagListAPIRequest

func (p *BlogServiceGetTagListAPIArgs) GetRequest() (v *api.GetTagListAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceGetTagListAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceGetTagListAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceGetTagListAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceGetTagListAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetTagListAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetTagListAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewGetTagListAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetTagListAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTagListAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetTagListAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceGetTagListAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetTagListAPIArgs(%+v)", *p)
}

type BlogServiceGetTagListAPIResult struct {
	Success *api.GetTagListAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceGetTagListAPIResult() *BlogServiceGetTagListAPIResult {
	return &BlogServiceGetTagListAPIResult{}
}

var BlogServiceGetTagListAPIResult_Success_DEFAULT *api.GetTagListAPIResponse

func (p *BlogServiceGetTagListAPIResult) GetSuccess() (v *api.GetTagListAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceGetTagListAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceGetTagListAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceGetTagListAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceGetTagListAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetTagListAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetTagListAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewGetTagListAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetTagListAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTagListAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetTagListAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceGetTagListAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetTagListAPIResult(%+v)", *p)
}

type BlogServiceCreateCategoryAPIArgs struct {
	Request *api.CreateCategoryAPIRequest `thrift:"request,1"`
}

func NewBlogServiceCreateCategoryAPIArgs() *BlogServiceCreateCategoryAPIArgs {
	return &BlogServiceCreateCategoryAPIArgs{}
}

var BlogServiceCreateCategoryAPIArgs_Request_DEFAULT *api.CreateCategoryAPIRequest

func (p *BlogServiceCreateCategoryAPIArgs) GetRequest() (v *api.CreateCategoryAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceCreateCategoryAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceCreateCategoryAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceCreateCategoryAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceCreateCategoryAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCreateCategoryAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCreateCategoryAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewCreateCategoryAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCreateCategoryAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCategoryAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCreateCategoryAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceCreateCategoryAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCreateCategoryAPIArgs(%+v)", *p)
}

type BlogServiceCreateCategoryAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceCreateCategoryAPIResult() *BlogServiceCreateCategoryAPIResult {
	return &BlogServiceCreateCategoryAPIResult{}
}

var BlogServiceCreateCategoryAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceCreateCategoryAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceCreateCategoryAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceCreateCategoryAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceCreateCategoryAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceCreateCategoryAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCreateCategoryAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCreateCategoryAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCreateCategoryAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCategoryAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCreateCategoryAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceCreateCategoryAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCreateCategoryAPIResult(%+v)", *p)
}

type BlogServiceUpdateCategoryAPIArgs struct {
	Request *api.UpdateCategoryAPIRequest `thrift:"request,1"`
}

func NewBlogServiceUpdateCategoryAPIArgs() *BlogServiceUpdateCategoryAPIArgs {
	return &BlogServiceUpdateCategoryAPIArgs{}
}

var BlogServiceUpdateCategoryAPIArgs_Request_DEFAULT *api.UpdateCategoryAPIRequest

func (p *BlogServiceUpdateCategoryAPIArgs) GetRequest() (v *api.UpdateCategoryAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceUpdateCategoryAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceUpdateCategoryAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceUpdateCategoryAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceUpdateCategoryAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdateCategoryAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewUpdateCategoryAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdateCategoryAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategoryAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdateCategoryAPIArgs(%+v)", *p)
}

type BlogServiceUpdateCategoryAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceUpdateCategoryAPIResult() *BlogServiceUpdateCategoryAPIResult {
	return &BlogServiceUpdateCategoryAPIResult{}
}

var BlogServiceUpdateCategoryAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceUpdateCategoryAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceUpdateCategoryAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceUpdateCategoryAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceUpdateCategoryAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceUpdateCategoryAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdateCategoryAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdateCategoryAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategoryAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdateCategoryAPIResult(%+v)", *p)
}

type BlogServiceDeleteCategoryAPIArgs struct {
	Request *api.DeleteCategoryAPIRequest `thrift:"request,1"`
}

func NewBlogServiceDeleteCategoryAPIArgs() *BlogServiceDeleteCategoryAPIArgs {
	return &BlogServiceDeleteCategoryAPIArgs{}
}

var BlogServiceDeleteCategoryAPIArgs_Request_DEFAULT *api.DeleteCategoryAPIRequest

func (p *BlogServiceDeleteCategoryAPIArgs) GetRequest() (v *api.DeleteCategoryAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceDeleteCategoryAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceDeleteCategoryAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceDeleteCategoryAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceDeleteCategoryAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceDeleteCategoryAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceDeleteCategoryAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewDeleteCategoryAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceDeleteCategoryAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCategoryAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceDeleteCategoryAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceDeleteCategoryAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceDeleteCategoryAPIArgs(%+v)", *p)
}

type BlogServiceDeleteCategoryAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceDeleteCategoryAPIResult() *BlogServiceDeleteCategoryAPIResult {
	return &BlogServiceDeleteCategoryAPIResult{}
}

var BlogServiceDeleteCategoryAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceDeleteCategoryAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceDeleteCategoryAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceDeleteCategoryAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceDeleteCategoryAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceDeleteCategoryAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceDeleteCategoryAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceDeleteCategoryAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceDeleteCategoryAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCategoryAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceDeleteCategoryAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceDeleteCategoryAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceDeleteCategoryAPIResult(%+v)", *p)
}

type BlogServiceUpdateCategoryOrderAPIArgs struct {
	Request *api.UpdateCategoryOrderAPIRequest `thrift:"request,1"`
}

func NewBlogServiceUpdateCategoryOrderAPIArgs() *BlogServiceUpdateCategoryOrderAPIArgs {
	return &BlogServiceUpdateCategoryOrderAPIArgs{}
}

var BlogServiceUpdateCategoryOrderAPIArgs_Request_DEFAULT *api.UpdateCategoryOrderAPIRequest

func (p *BlogServiceUpdateCategoryOrderAPIArgs) GetRequest() (v *api.UpdateCategoryOrderAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceUpdateCategoryOrderAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceUpdateCategoryOrderAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceUpdateCategoryOrderAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceUpdateCategoryOrderAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdateCategoryOrderAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryOrderAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewUpdateCategoryOrderAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdateCategoryOrderAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategoryOrderAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryOrderAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryOrderAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdateCategoryOrderAPIArgs(%+v)", *p)
}

type BlogServiceUpdateCategoryOrderAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceUpdateCategoryOrderAPIResult() *BlogServiceUpdateCategoryOrderAPIResult {
	return &BlogServiceUpdateCategoryOrderAPIResult{}
}

var BlogServiceUpdateCategoryOrderAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceUpdateCategoryOrderAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceUpdateCategoryOrderAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceUpdateCategoryOrderAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceUpdateCategoryOrderAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceUpdateCategoryOrderAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdateCategoryOrderAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryOrderAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdateCategoryOrderAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCategoryOrderAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryOrderAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceUpdateCategoryOrderAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdateCategoryOrderAPIResult(%+v)", *p)
}

type BlogServiceGetCategoryListAPIArgs struct {
}

func NewBlogServiceGetCategoryListAPIArgs() *BlogServiceGetCategoryListAPIArgs {
	return &BlogServiceGetCategoryListAPIArgs{}
}

var fieldIDToName_BlogServiceGetCategoryListAPIArgs = map[int16]string{}

func (p *BlogServiceGetCategoryListAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetCategoryListAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetCategoryListAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetCategoryListAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetCategoryListAPIArgs(%+v)", *p)
}

type BlogServiceGetCategoryListAPIResult struct {
	Success *api.GetCategoryListAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceGetCategoryListAPIResult() *BlogServiceGetCategoryListAPIResult {
	return &BlogServiceGetCategoryListAPIResult{}
}

var BlogServiceGetCategoryListAPIResult_Success_DEFAULT *api.GetCategoryListAPIResponse

func (p *BlogServiceGetCategoryListAPIResult) GetSuccess() (v *api.GetCategoryListAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceGetCategoryListAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceGetCategoryListAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceGetCategoryListAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceGetCategoryListAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetCategoryListAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetCategoryListAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewGetCategoryListAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetCategoryListAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCategoryListAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetCategoryListAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceGetCategoryListAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetCategoryListAPIResult(%+v)", *p)
}

type BlogServiceCreatePostAPIArgs struct {
	Request *api.CreatePostAPIRequest `thrift:"request,1"`
}

func NewBlogServiceCreatePostAPIArgs() *BlogServiceCreatePostAPIArgs {
	return &BlogServiceCreatePostAPIArgs{}
}

var BlogServiceCreatePostAPIArgs_Request_DEFAULT *api.CreatePostAPIRequest

func (p *BlogServiceCreatePostAPIArgs) GetRequest() (v *api.CreatePostAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceCreatePostAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceCreatePostAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceCreatePostAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceCreatePostAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCreatePostAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCreatePostAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewCreatePostAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCreatePostAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePostAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCreatePostAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceCreatePostAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCreatePostAPIArgs(%+v)", *p)
}

type BlogServiceCreatePostAPIResult struct {
	Success *api.CreatePostAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceCreatePostAPIResult() *BlogServiceCreatePostAPIResult {
	return &BlogServiceCreatePostAPIResult{}
}

var BlogServiceCreatePostAPIResult_Success_DEFAULT *api.CreatePostAPIResponse

func (p *BlogServiceCreatePostAPIResult) GetSuccess() (v *api.CreatePostAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceCreatePostAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceCreatePostAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceCreatePostAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceCreatePostAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCreatePostAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCreatePostAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCreatePostAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCreatePostAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePostAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCreatePostAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceCreatePostAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCreatePostAPIResult(%+v)", *p)
}

type BlogServiceGetPostAPIArgs struct {
	Request *api.GetPostAPIRequest `thrift:"request,1"`
}

func NewBlogServiceGetPostAPIArgs() *BlogServiceGetPostAPIArgs {
	return &BlogServiceGetPostAPIArgs{}
}

var BlogServiceGetPostAPIArgs_Request_DEFAULT *api.GetPostAPIRequest

func (p *BlogServiceGetPostAPIArgs) GetRequest() (v *api.GetPostAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceGetPostAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceGetPostAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceGetPostAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceGetPostAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetPostAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetPostAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewGetPostAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetPostAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPostAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetPostAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceGetPostAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetPostAPIArgs(%+v)", *p)
}

type BlogServiceGetPostAPIResult struct {
	Success *api.GetPostAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceGetPostAPIResult() *BlogServiceGetPostAPIResult {
	return &BlogServiceGetPostAPIResult{}
}

var BlogServiceGetPostAPIResult_Success_DEFAULT *api.GetPostAPIResponse

func (p *BlogServiceGetPostAPIResult) GetSuccess() (v *api.GetPostAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceGetPostAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceGetPostAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceGetPostAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceGetPostAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetPostAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetPostAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewGetPostAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetPostAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPostAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetPostAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceGetPostAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetPostAPIResult(%+v)", *p)
}

type BlogServiceUpdatePostAPIArgs struct {
	Request *api.UpdatePostAPIRequest `thrift:"request,1"`
}

func NewBlogServiceUpdatePostAPIArgs() *BlogServiceUpdatePostAPIArgs {
	return &BlogServiceUpdatePostAPIArgs{}
}

var BlogServiceUpdatePostAPIArgs_Request_DEFAULT *api.UpdatePostAPIRequest

func (p *BlogServiceUpdatePostAPIArgs) GetRequest() (v *api.UpdatePostAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceUpdatePostAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceUpdatePostAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceUpdatePostAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceUpdatePostAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdatePostAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdatePostAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewUpdatePostAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdatePostAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePostAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdatePostAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceUpdatePostAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdatePostAPIArgs(%+v)", *p)
}

type BlogServiceUpdatePostAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceUpdatePostAPIResult() *BlogServiceUpdatePostAPIResult {
	return &BlogServiceUpdatePostAPIResult{}
}

var BlogServiceUpdatePostAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceUpdatePostAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceUpdatePostAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceUpdatePostAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceUpdatePostAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceUpdatePostAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdatePostAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdatePostAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdatePostAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePostAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdatePostAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceUpdatePostAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdatePostAPIResult(%+v)", *p)
}

type BlogServiceUpdatePostStatusAPIArgs struct {
	Request *api.UpdatePostStatusAPIRequest `thrift:"request,1"`
}

func NewBlogServiceUpdatePostStatusAPIArgs() *BlogServiceUpdatePostStatusAPIArgs {
	return &BlogServiceUpdatePostStatusAPIArgs{}
}

var BlogServiceUpdatePostStatusAPIArgs_Request_DEFAULT *api.UpdatePostStatusAPIRequest

func (p *BlogServiceUpdatePostStatusAPIArgs) GetRequest() (v *api.UpdatePostStatusAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceUpdatePostStatusAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceUpdatePostStatusAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceUpdatePostStatusAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceUpdatePostStatusAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdatePostStatusAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdatePostStatusAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewUpdatePostStatusAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdatePostStatusAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePostStatusAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdatePostStatusAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceUpdatePostStatusAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdatePostStatusAPIArgs(%+v)", *p)
}

type BlogServiceUpdatePostStatusAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceUpdatePostStatusAPIResult() *BlogServiceUpdatePostStatusAPIResult {
	return &BlogServiceUpdatePostStatusAPIResult{}
}

var BlogServiceUpdatePostStatusAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceUpdatePostStatusAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceUpdatePostStatusAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceUpdatePostStatusAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceUpdatePostStatusAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceUpdatePostStatusAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdatePostStatusAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdatePostStatusAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdatePostStatusAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePostStatusAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdatePostStatusAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceUpdatePostStatusAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdatePostStatusAPIResult(%+v)", *p)
}

type BlogServiceGetPostListAPIArgs struct {
	Request *api.GetPostListAPIRequest `thrift:"request,1"`
}

func NewBlogServiceGetPostListAPIArgs() *BlogServiceGetPostListAPIArgs {
	return &BlogServiceGetPostListAPIArgs{}
}

var BlogServiceGetPostListAPIArgs_Request_DEFAULT *api.GetPostListAPIRequest

func (p *BlogServiceGetPostListAPIArgs) GetRequest() (v *api.GetPostListAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceGetPostListAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceGetPostListAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceGetPostListAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceGetPostListAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetPostListAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetPostListAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewGetPostListAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetPostListAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPostListAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetPostListAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceGetPostListAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetPostListAPIArgs(%+v)", *p)
}

type BlogServiceGetPostListAPIResult struct {
	Success *api.GetPostListAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceGetPostListAPIResult() *BlogServiceGetPostListAPIResult {
	return &BlogServiceGetPostListAPIResult{}
}

var BlogServiceGetPostListAPIResult_Success_DEFAULT *api.GetPostListAPIResponse

func (p *BlogServiceGetPostListAPIResult) GetSuccess() (v *api.GetPostListAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceGetPostListAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceGetPostListAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceGetPostListAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceGetPostListAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetPostListAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetPostListAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewGetPostListAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetPostListAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPostListAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetPostListAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceGetPostListAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetPostListAPIResult(%+v)", *p)
}

type BlogServiceDeletePostAPIArgs struct {
	Request *api.DeletePostAPIRequest `thrift:"request,1"`
}

func NewBlogServiceDeletePostAPIArgs() *BlogServiceDeletePostAPIArgs {
	return &BlogServiceDeletePostAPIArgs{}
}

var BlogServiceDeletePostAPIArgs_Request_DEFAULT *api.DeletePostAPIRequest

func (p *BlogServiceDeletePostAPIArgs) GetRequest() (v *api.DeletePostAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceDeletePostAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceDeletePostAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceDeletePostAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceDeletePostAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceDeletePostAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceDeletePostAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewDeletePostAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceDeletePostAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceDeletePostAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceDeletePostAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceDeletePostAPIArgs(%+v)", *p)
}

type BlogServiceDeletePostAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceDeletePostAPIResult() *BlogServiceDeletePostAPIResult {
	return &BlogServiceDeletePostAPIResult{}
}

var BlogServiceDeletePostAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceDeletePostAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceDeletePostAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceDeletePostAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceDeletePostAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceDeletePostAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceDeletePostAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceDeletePostAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceDeletePostAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceDeletePostAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceDeletePostAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceDeletePostAPIResult(%+v)", *p)
}

type BlogServiceCreatePageAPIArgs struct {
	Request *api.CreatePageAPIRequest `thrift:"request,1"`
}

func NewBlogServiceCreatePageAPIArgs() *BlogServiceCreatePageAPIArgs {
	return &BlogServiceCreatePageAPIArgs{}
}

var BlogServiceCreatePageAPIArgs_Request_DEFAULT *api.CreatePageAPIRequest

func (p *BlogServiceCreatePageAPIArgs) GetRequest() (v *api.CreatePageAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceCreatePageAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceCreatePageAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceCreatePageAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceCreatePageAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCreatePageAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCreatePageAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewCreatePageAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCreatePageAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePageAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCreatePageAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceCreatePageAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCreatePageAPIArgs(%+v)", *p)
}

type BlogServiceCreatePageAPIResult struct {
	Success *api.CreatePageAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceCreatePageAPIResult() *BlogServiceCreatePageAPIResult {
	return &BlogServiceCreatePageAPIResult{}
}

var BlogServiceCreatePageAPIResult_Success_DEFAULT *api.CreatePageAPIResponse

func (p *BlogServiceCreatePageAPIResult) GetSuccess() (v *api.CreatePageAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceCreatePageAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceCreatePageAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceCreatePageAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceCreatePageAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCreatePageAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCreatePageAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCreatePageAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCreatePageAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePageAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCreatePageAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceCreatePageAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCreatePageAPIResult(%+v)", *p)
}

type BlogServiceGetPageAPIArgs struct {
	Request *api.GetPageAPIRequest `thrift:"request,1"`
}

func NewBlogServiceGetPageAPIArgs() *BlogServiceGetPageAPIArgs {
	return &BlogServiceGetPageAPIArgs{}
}

var BlogServiceGetPageAPIArgs_Request_DEFAULT *api.GetPageAPIRequest

func (p *BlogServiceGetPageAPIArgs) GetRequest() (v *api.GetPageAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceGetPageAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceGetPageAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceGetPageAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceGetPageAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetPageAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetPageAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewGetPageAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetPageAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPageAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetPageAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceGetPageAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetPageAPIArgs(%+v)", *p)
}

type BlogServiceGetPageAPIResult struct {
	Success *api.GetPageAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceGetPageAPIResult() *BlogServiceGetPageAPIResult {
	return &BlogServiceGetPageAPIResult{}
}

var BlogServiceGetPageAPIResult_Success_DEFAULT *api.GetPageAPIResponse

func (p *BlogServiceGetPageAPIResult) GetSuccess() (v *api.GetPageAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceGetPageAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceGetPageAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceGetPageAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceGetPageAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetPageAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetPageAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewGetPageAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetPageAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPageAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetPageAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceGetPageAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetPageAPIResult(%+v)", *p)
}

type BlogServiceUpdatePageAPIArgs struct {
	Request *api.UpdatePageAPIRequest `thrift:"request,1"`
}

func NewBlogServiceUpdatePageAPIArgs() *BlogServiceUpdatePageAPIArgs {
	return &BlogServiceUpdatePageAPIArgs{}
}

var BlogServiceUpdatePageAPIArgs_Request_DEFAULT *api.UpdatePageAPIRequest

func (p *BlogServiceUpdatePageAPIArgs) GetRequest() (v *api.UpdatePageAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceUpdatePageAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceUpdatePageAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceUpdatePageAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceUpdatePageAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdatePageAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdatePageAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewUpdatePageAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdatePageAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePageAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdatePageAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceUpdatePageAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdatePageAPIArgs(%+v)", *p)
}

type BlogServiceUpdatePageAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceUpdatePageAPIResult() *BlogServiceUpdatePageAPIResult {
	return &BlogServiceUpdatePageAPIResult{}
}

var BlogServiceUpdatePageAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceUpdatePageAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceUpdatePageAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceUpdatePageAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceUpdatePageAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceUpdatePageAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdatePageAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdatePageAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdatePageAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePageAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdatePageAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceUpdatePageAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdatePageAPIResult(%+v)", *p)
}

type BlogServiceGetPageListAPIArgs struct {
}

func NewBlogServiceGetPageListAPIArgs() *BlogServiceGetPageListAPIArgs {
	return &BlogServiceGetPageListAPIArgs{}
}

var fieldIDToName_BlogServiceGetPageListAPIArgs = map[int16]string{}

func (p *BlogServiceGetPageListAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetPageListAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetPageListAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetPageListAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetPageListAPIArgs(%+v)", *p)
}

type BlogServiceGetPageListAPIResult struct {
	Success *api.GetPageListAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceGetPageListAPIResult() *BlogServiceGetPageListAPIResult {
	return &BlogServiceGetPageListAPIResult{}
}

var BlogServiceGetPageListAPIResult_Success_DEFAULT *api.GetPageListAPIResponse

func (p *BlogServiceGetPageListAPIResult) GetSuccess() (v *api.GetPageListAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceGetPageListAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceGetPageListAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceGetPageListAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceGetPageListAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetPageListAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetPageListAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewGetPageListAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetPageListAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPageListAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetPageListAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceGetPageListAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetPageListAPIResult(%+v)", *p)
}

type BlogServiceDeletePageAPIArgs struct {
	Request *api.DeletePageAPIRequest `thrift:"request,1"`
}

func NewBlogServiceDeletePageAPIArgs() *BlogServiceDeletePageAPIArgs {
	return &BlogServiceDeletePageAPIArgs{}
}

var BlogServiceDeletePageAPIArgs_Request_DEFAULT *api.DeletePageAPIRequest

func (p *BlogServiceDeletePageAPIArgs) GetRequest() (v *api.DeletePageAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceDeletePageAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceDeletePageAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceDeletePageAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceDeletePageAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceDeletePageAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceDeletePageAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewDeletePageAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceDeletePageAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePageAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceDeletePageAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceDeletePageAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceDeletePageAPIArgs(%+v)", *p)
}

type BlogServiceDeletePageAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceDeletePageAPIResult() *BlogServiceDeletePageAPIResult {
	return &BlogServiceDeletePageAPIResult{}
}

var BlogServiceDeletePageAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceDeletePageAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceDeletePageAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceDeletePageAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceDeletePageAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceDeletePageAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceDeletePageAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceDeletePageAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceDeletePageAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePageAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceDeletePageAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceDeletePageAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceDeletePageAPIResult(%+v)", *p)
}

type BlogServiceGetCommentListAdminAPIArgs struct {
	Request *api.GetCommentListAdminAPIRequest `thrift:"request,1"`
}

func NewBlogServiceGetCommentListAdminAPIArgs() *BlogServiceGetCommentListAdminAPIArgs {
	return &BlogServiceGetCommentListAdminAPIArgs{}
}

var BlogServiceGetCommentListAdminAPIArgs_Request_DEFAULT *api.GetCommentListAdminAPIRequest

func (p *BlogServiceGetCommentListAdminAPIArgs) GetRequest() (v *api.GetCommentListAdminAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceGetCommentListAdminAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceGetCommentListAdminAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceGetCommentListAdminAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceGetCommentListAdminAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetCommentListAdminAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetCommentListAdminAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewGetCommentListAdminAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetCommentListAdminAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCommentListAdminAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetCommentListAdminAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceGetCommentListAdminAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetCommentListAdminAPIArgs(%+v)", *p)
}

type BlogServiceGetCommentListAdminAPIResult struct {
	Success *api.GetCommentListAdminAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceGetCommentListAdminAPIResult() *BlogServiceGetCommentListAdminAPIResult {
	return &BlogServiceGetCommentListAdminAPIResult{}
}

var BlogServiceGetCommentListAdminAPIResult_Success_DEFAULT *api.GetCommentListAdminAPIResponse

func (p *BlogServiceGetCommentListAdminAPIResult) GetSuccess() (v *api.GetCommentListAdminAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceGetCommentListAdminAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceGetCommentListAdminAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceGetCommentListAdminAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceGetCommentListAdminAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetCommentListAdminAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetCommentListAdminAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewGetCommentListAdminAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetCommentListAdminAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCommentListAdminAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetCommentListAdminAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceGetCommentListAdminAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetCommentListAdminAPIResult(%+v)", *p)
}

type BlogServiceReplyCommentAdminAPIArgs struct {
	Request *api.ReplyCommentAdminAPIRequest `thrift:"request,1"`
}

func NewBlogServiceReplyCommentAdminAPIArgs() *BlogServiceReplyCommentAdminAPIArgs {
	return &BlogServiceReplyCommentAdminAPIArgs{}
}

var BlogServiceReplyCommentAdminAPIArgs_Request_DEFAULT *api.ReplyCommentAdminAPIRequest

func (p *BlogServiceReplyCommentAdminAPIArgs) GetRequest() (v *api.ReplyCommentAdminAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceReplyCommentAdminAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceReplyCommentAdminAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceReplyCommentAdminAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceReplyCommentAdminAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceReplyCommentAdminAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceReplyCommentAdminAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewReplyCommentAdminAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceReplyCommentAdminAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReplyCommentAdminAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceReplyCommentAdminAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceReplyCommentAdminAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceReplyCommentAdminAPIArgs(%+v)", *p)
}

type BlogServiceReplyCommentAdminAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceReplyCommentAdminAPIResult() *BlogServiceReplyCommentAdminAPIResult {
	return &BlogServiceReplyCommentAdminAPIResult{}
}

var BlogServiceReplyCommentAdminAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceReplyCommentAdminAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceReplyCommentAdminAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceReplyCommentAdminAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceReplyCommentAdminAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceReplyCommentAdminAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceReplyCommentAdminAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceReplyCommentAdminAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceReplyCommentAdminAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReplyCommentAdminAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceReplyCommentAdminAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceReplyCommentAdminAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceReplyCommentAdminAPIResult(%+v)", *p)
}

type BlogServiceUpdateCommentStatusAdminAPIArgs struct {
	Request *api.UpdateCommentStatusAdminAPIRequest `thrift:"request,1"`
}

func NewBlogServiceUpdateCommentStatusAdminAPIArgs() *BlogServiceUpdateCommentStatusAdminAPIArgs {
	return &BlogServiceUpdateCommentStatusAdminAPIArgs{}
}

var BlogServiceUpdateCommentStatusAdminAPIArgs_Request_DEFAULT *api.UpdateCommentStatusAdminAPIRequest

func (p *BlogServiceUpdateCommentStatusAdminAPIArgs) GetRequest() (v *api.UpdateCommentStatusAdminAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceUpdateCommentStatusAdminAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceUpdateCommentStatusAdminAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceUpdateCommentStatusAdminAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceUpdateCommentStatusAdminAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdateCommentStatusAdminAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdateCommentStatusAdminAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewUpdateCommentStatusAdminAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdateCommentStatusAdminAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCommentStatusAdminAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdateCommentStatusAdminAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceUpdateCommentStatusAdminAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdateCommentStatusAdminAPIArgs(%+v)", *p)
}

type BlogServiceUpdateCommentStatusAdminAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceUpdateCommentStatusAdminAPIResult() *BlogServiceUpdateCommentStatusAdminAPIResult {
	return &BlogServiceUpdateCommentStatusAdminAPIResult{}
}

var BlogServiceUpdateCommentStatusAdminAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceUpdateCommentStatusAdminAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceUpdateCommentStatusAdminAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceUpdateCommentStatusAdminAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceUpdateCommentStatusAdminAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceUpdateCommentStatusAdminAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceUpdateCommentStatusAdminAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceUpdateCommentStatusAdminAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceUpdateCommentStatusAdminAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCommentStatusAdminAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceUpdateCommentStatusAdminAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceUpdateCommentStatusAdminAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceUpdateCommentStatusAdminAPIResult(%+v)", *p)
}

type BlogServiceDeleteCommentAdminAPIArgs struct {
	Request *api.DeleteCommentAdminAPIRequest `thrift:"request,1"`
}

func NewBlogServiceDeleteCommentAdminAPIArgs() *BlogServiceDeleteCommentAdminAPIArgs {
	return &BlogServiceDeleteCommentAdminAPIArgs{}
}

var BlogServiceDeleteCommentAdminAPIArgs_Request_DEFAULT *api.DeleteCommentAdminAPIRequest

func (p *BlogServiceDeleteCommentAdminAPIArgs) GetRequest() (v *api.DeleteCommentAdminAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceDeleteCommentAdminAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceDeleteCommentAdminAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceDeleteCommentAdminAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceDeleteCommentAdminAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceDeleteCommentAdminAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceDeleteCommentAdminAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewDeleteCommentAdminAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceDeleteCommentAdminAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCommentAdminAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceDeleteCommentAdminAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceDeleteCommentAdminAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceDeleteCommentAdminAPIArgs(%+v)", *p)
}

type BlogServiceDeleteCommentAdminAPIResult struct {
	Success *api.CommonResponse `thrift:"success,0,optional"`
}

func NewBlogServiceDeleteCommentAdminAPIResult() *BlogServiceDeleteCommentAdminAPIResult {
	return &BlogServiceDeleteCommentAdminAPIResult{}
}

var BlogServiceDeleteCommentAdminAPIResult_Success_DEFAULT *api.CommonResponse

func (p *BlogServiceDeleteCommentAdminAPIResult) GetSuccess() (v *api.CommonResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceDeleteCommentAdminAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceDeleteCommentAdminAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceDeleteCommentAdminAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceDeleteCommentAdminAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceDeleteCommentAdminAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceDeleteCommentAdminAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceDeleteCommentAdminAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCommentAdminAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceDeleteCommentAdminAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceDeleteCommentAdminAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceDeleteCommentAdminAPIResult(%+v)", *p)
}

type BlogServiceSearchAPIArgs struct {
	Request *api.SearchAPIRequest `thrift:"request,1"`
}

func NewBlogServiceSearchAPIArgs() *BlogServiceSearchAPIArgs {
	return &BlogServiceSearchAPIArgs{}
}

var BlogServiceSearchAPIArgs_Request_DEFAULT *api.SearchAPIRequest

func (p *BlogServiceSearchAPIArgs) GetRequest() (v *api.SearchAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceSearchAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceSearchAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceSearchAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceSearchAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceSearchAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceSearchAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewSearchAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceSearchAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceSearchAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceSearchAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceSearchAPIArgs(%+v)", *p)
}

type BlogServiceSearchAPIResult struct {
	Success *api.SearchAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceSearchAPIResult() *BlogServiceSearchAPIResult {
	return &BlogServiceSearchAPIResult{}
}

var BlogServiceSearchAPIResult_Success_DEFAULT *api.SearchAPIResponse

func (p *BlogServiceSearchAPIResult) GetSuccess() (v *api.SearchAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceSearchAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceSearchAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceSearchAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceSearchAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceSearchAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceSearchAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewSearchAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceSearchAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceSearchAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceSearchAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceSearchAPIResult(%+v)", *p)
}

type BlogServiceGetCommentListAPIArgs struct {
	Request *api.GetCommentListAPIRequest `thrift:"request,1"`
}

func NewBlogServiceGetCommentListAPIArgs() *BlogServiceGetCommentListAPIArgs {
	return &BlogServiceGetCommentListAPIArgs{}
}

var BlogServiceGetCommentListAPIArgs_Request_DEFAULT *api.GetCommentListAPIRequest

func (p *BlogServiceGetCommentListAPIArgs) GetRequest() (v *api.GetCommentListAPIRequest) {
	if !p.IsSetRequest() {
		return BlogServiceGetCommentListAPIArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceGetCommentListAPIArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceGetCommentListAPIArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceGetCommentListAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetCommentListAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetCommentListAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = api.NewGetCommentListAPIRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetCommentListAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCommentListAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetCommentListAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceGetCommentListAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetCommentListAPIArgs(%+v)", *p)
}

type BlogServiceGetCommentListAPIResult struct {
	Success *api.GetCommentListAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceGetCommentListAPIResult() *BlogServiceGetCommentListAPIResult {
	return &BlogServiceGetCommentListAPIResult{}
}

var BlogServiceGetCommentListAPIResult_Success_DEFAULT *api.GetCommentListAPIResponse

func (p *BlogServiceGetCommentListAPIResult) GetSuccess() (v *api.GetCommentListAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceGetCommentListAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceGetCommentListAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceGetCommentListAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceGetCommentListAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetCommentListAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetCommentListAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewGetCommentListAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetCommentListAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCommentListAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetCommentListAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceGetCommentListAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetCommentListAPIResult(%+v)", *p)
}

type BlogServiceCommentArticleAPIArgs struct {
	Requset *api.CommentArticleAPIRequest `thrift:"requset,1"`
}

func NewBlogServiceCommentArticleAPIArgs() *BlogServiceCommentArticleAPIArgs {
	return &BlogServiceCommentArticleAPIArgs{}
}

var BlogServiceCommentArticleAPIArgs_Requset_DEFAULT *api.CommentArticleAPIRequest

func (p *BlogServiceCommentArticleAPIArgs) GetRequset() (v *api.CommentArticleAPIRequest) {
	if !p.IsSetRequset() {
		return BlogServiceCommentArticleAPIArgs_Requset_DEFAULT
	}
	return p.Requset
}

var fieldIDToName_BlogServiceCommentArticleAPIArgs = map[int16]string{
	1: "requset",
}

func (p *BlogServiceCommentArticleAPIArgs) IsSetRequset() bool {
	return p.Requset != nil
}

func (p *BlogServiceCommentArticleAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCommentArticleAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCommentArticleAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Requset = api.NewCommentArticleAPIRequest()
	if err := p.Requset.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCommentArticleAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommentArticleAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCommentArticleAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("requset", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Requset.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceCommentArticleAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCommentArticleAPIArgs(%+v)", *p)
}

type BlogServiceCommentArticleAPIResult struct {
	Success *api.CommentArticleAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceCommentArticleAPIResult() *BlogServiceCommentArticleAPIResult {
	return &BlogServiceCommentArticleAPIResult{}
}

var BlogServiceCommentArticleAPIResult_Success_DEFAULT *api.CommentArticleAPIResponse

func (p *BlogServiceCommentArticleAPIResult) GetSuccess() (v *api.CommentArticleAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceCommentArticleAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceCommentArticleAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceCommentArticleAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceCommentArticleAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCommentArticleAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCommentArticleAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewCommentArticleAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCommentArticleAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommentArticleAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCommentArticleAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceCommentArticleAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCommentArticleAPIResult(%+v)", *p)
}

type BlogServiceReplyCommentAPIArgs struct {
	Requset *api.ReplyCommentAPIRequest `thrift:"requset,1"`
}

func NewBlogServiceReplyCommentAPIArgs() *BlogServiceReplyCommentAPIArgs {
	return &BlogServiceReplyCommentAPIArgs{}
}

var BlogServiceReplyCommentAPIArgs_Requset_DEFAULT *api.ReplyCommentAPIRequest

func (p *BlogServiceReplyCommentAPIArgs) GetRequset() (v *api.ReplyCommentAPIRequest) {
	if !p.IsSetRequset() {
		return BlogServiceReplyCommentAPIArgs_Requset_DEFAULT
	}
	return p.Requset
}

var fieldIDToName_BlogServiceReplyCommentAPIArgs = map[int16]string{
	1: "requset",
}

func (p *BlogServiceReplyCommentAPIArgs) IsSetRequset() bool {
	return p.Requset != nil
}

func (p *BlogServiceReplyCommentAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceReplyCommentAPIArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceReplyCommentAPIArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Requset = api.NewReplyCommentAPIRequest()
	if err := p.Requset.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceReplyCommentAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReplyCommentAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceReplyCommentAPIArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("requset", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Requset.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceReplyCommentAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceReplyCommentAPIArgs(%+v)", *p)
}

type BlogServiceReplyCommentAPIResult struct {
	Success *api.ReplyCommentAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceReplyCommentAPIResult() *BlogServiceReplyCommentAPIResult {
	return &BlogServiceReplyCommentAPIResult{}
}

var BlogServiceReplyCommentAPIResult_Success_DEFAULT *api.ReplyCommentAPIResponse

func (p *BlogServiceReplyCommentAPIResult) GetSuccess() (v *api.ReplyCommentAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceReplyCommentAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceReplyCommentAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceReplyCommentAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceReplyCommentAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceReplyCommentAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceReplyCommentAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewReplyCommentAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceReplyCommentAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReplyCommentAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceReplyCommentAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceReplyCommentAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceReplyCommentAPIResult(%+v)", *p)
}

type BlogServiceGetCaptchaAPIArgs struct {
}

func NewBlogServiceGetCaptchaAPIArgs() *BlogServiceGetCaptchaAPIArgs {
	return &BlogServiceGetCaptchaAPIArgs{}
}

var fieldIDToName_BlogServiceGetCaptchaAPIArgs = map[int16]string{}

func (p *BlogServiceGetCaptchaAPIArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetCaptchaAPIArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetCaptchaAPI_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetCaptchaAPIArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetCaptchaAPIArgs(%+v)", *p)
}

type BlogServiceGetCaptchaAPIResult struct {
	Success *api.GetCaptchaAPIResponse `thrift:"success,0,optional"`
}

func NewBlogServiceGetCaptchaAPIResult() *BlogServiceGetCaptchaAPIResult {
	return &BlogServiceGetCaptchaAPIResult{}
}

var BlogServiceGetCaptchaAPIResult_Success_DEFAULT *api.GetCaptchaAPIResponse

func (p *BlogServiceGetCaptchaAPIResult) GetSuccess() (v *api.GetCaptchaAPIResponse) {
	if !p.IsSetSuccess() {
		return BlogServiceGetCaptchaAPIResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceGetCaptchaAPIResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceGetCaptchaAPIResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceGetCaptchaAPIResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceGetCaptchaAPIResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceGetCaptchaAPIResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = api.NewGetCaptchaAPIResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceGetCaptchaAPIResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCaptchaAPI_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceGetCaptchaAPIResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceGetCaptchaAPIResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceGetCaptchaAPIResult(%+v)", *p)
}

type BlogServiceIndexPageArgs struct {
}

func NewBlogServiceIndexPageArgs() *BlogServiceIndexPageArgs {
	return &BlogServiceIndexPageArgs{}
}

var fieldIDToName_BlogServiceIndexPageArgs = map[int16]string{}

func (p *BlogServiceIndexPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceIndexPageArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("IndexPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceIndexPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceIndexPageArgs(%+v)", *p)
}

type BlogServiceIndexPageResult struct {
	Success *page.PostListPageResp `thrift:"success,0,optional"`
}

func NewBlogServiceIndexPageResult() *BlogServiceIndexPageResult {
	return &BlogServiceIndexPageResult{}
}

var BlogServiceIndexPageResult_Success_DEFAULT *page.PostListPageResp

func (p *BlogServiceIndexPageResult) GetSuccess() (v *page.PostListPageResp) {
	if !p.IsSetSuccess() {
		return BlogServiceIndexPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceIndexPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceIndexPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceIndexPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceIndexPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceIndexPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewPostListPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceIndexPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IndexPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceIndexPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceIndexPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceIndexPageResult(%+v)", *p)
}

type BlogServiceIndexByPaginationPageArgs struct {
	Request *page.PostListPageRequest `thrift:"request,1"`
}

func NewBlogServiceIndexByPaginationPageArgs() *BlogServiceIndexByPaginationPageArgs {
	return &BlogServiceIndexByPaginationPageArgs{}
}

var BlogServiceIndexByPaginationPageArgs_Request_DEFAULT *page.PostListPageRequest

func (p *BlogServiceIndexByPaginationPageArgs) GetRequest() (v *page.PostListPageRequest) {
	if !p.IsSetRequest() {
		return BlogServiceIndexByPaginationPageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceIndexByPaginationPageArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceIndexByPaginationPageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceIndexByPaginationPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceIndexByPaginationPageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceIndexByPaginationPageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = page.NewPostListPageRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceIndexByPaginationPageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IndexByPaginationPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceIndexByPaginationPageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceIndexByPaginationPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceIndexByPaginationPageArgs(%+v)", *p)
}

type BlogServiceIndexByPaginationPageResult struct {
	Success *page.PostListPageResp `thrift:"success,0,optional"`
}

func NewBlogServiceIndexByPaginationPageResult() *BlogServiceIndexByPaginationPageResult {
	return &BlogServiceIndexByPaginationPageResult{}
}

var BlogServiceIndexByPaginationPageResult_Success_DEFAULT *page.PostListPageResp

func (p *BlogServiceIndexByPaginationPageResult) GetSuccess() (v *page.PostListPageResp) {
	if !p.IsSetSuccess() {
		return BlogServiceIndexByPaginationPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceIndexByPaginationPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceIndexByPaginationPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceIndexByPaginationPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceIndexByPaginationPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceIndexByPaginationPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewPostListPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceIndexByPaginationPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IndexByPaginationPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceIndexByPaginationPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceIndexByPaginationPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceIndexByPaginationPageResult(%+v)", *p)
}

type BlogServiceCategoryPostPageArgs struct {
	Request *page.PostListPageRequest `thrift:"request,1"`
}

func NewBlogServiceCategoryPostPageArgs() *BlogServiceCategoryPostPageArgs {
	return &BlogServiceCategoryPostPageArgs{}
}

var BlogServiceCategoryPostPageArgs_Request_DEFAULT *page.PostListPageRequest

func (p *BlogServiceCategoryPostPageArgs) GetRequest() (v *page.PostListPageRequest) {
	if !p.IsSetRequest() {
		return BlogServiceCategoryPostPageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceCategoryPostPageArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceCategoryPostPageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceCategoryPostPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCategoryPostPageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCategoryPostPageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = page.NewPostListPageRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCategoryPostPageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CategoryPostPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCategoryPostPageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceCategoryPostPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCategoryPostPageArgs(%+v)", *p)
}

type BlogServiceCategoryPostPageResult struct {
	Success *page.PostListPageResp `thrift:"success,0,optional"`
}

func NewBlogServiceCategoryPostPageResult() *BlogServiceCategoryPostPageResult {
	return &BlogServiceCategoryPostPageResult{}
}

var BlogServiceCategoryPostPageResult_Success_DEFAULT *page.PostListPageResp

func (p *BlogServiceCategoryPostPageResult) GetSuccess() (v *page.PostListPageResp) {
	if !p.IsSetSuccess() {
		return BlogServiceCategoryPostPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceCategoryPostPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceCategoryPostPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceCategoryPostPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCategoryPostPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCategoryPostPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewPostListPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCategoryPostPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CategoryPostPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCategoryPostPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceCategoryPostPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCategoryPostPageResult(%+v)", *p)
}

type BlogServiceCategoryPostByPaginationPageArgs struct {
	Request *page.PostListPageRequest `thrift:"request,1"`
}

func NewBlogServiceCategoryPostByPaginationPageArgs() *BlogServiceCategoryPostByPaginationPageArgs {
	return &BlogServiceCategoryPostByPaginationPageArgs{}
}

var BlogServiceCategoryPostByPaginationPageArgs_Request_DEFAULT *page.PostListPageRequest

func (p *BlogServiceCategoryPostByPaginationPageArgs) GetRequest() (v *page.PostListPageRequest) {
	if !p.IsSetRequest() {
		return BlogServiceCategoryPostByPaginationPageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceCategoryPostByPaginationPageArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceCategoryPostByPaginationPageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceCategoryPostByPaginationPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCategoryPostByPaginationPageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCategoryPostByPaginationPageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = page.NewPostListPageRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCategoryPostByPaginationPageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CategoryPostByPaginationPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCategoryPostByPaginationPageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceCategoryPostByPaginationPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCategoryPostByPaginationPageArgs(%+v)", *p)
}

type BlogServiceCategoryPostByPaginationPageResult struct {
	Success *page.PostListPageResp `thrift:"success,0,optional"`
}

func NewBlogServiceCategoryPostByPaginationPageResult() *BlogServiceCategoryPostByPaginationPageResult {
	return &BlogServiceCategoryPostByPaginationPageResult{}
}

var BlogServiceCategoryPostByPaginationPageResult_Success_DEFAULT *page.PostListPageResp

func (p *BlogServiceCategoryPostByPaginationPageResult) GetSuccess() (v *page.PostListPageResp) {
	if !p.IsSetSuccess() {
		return BlogServiceCategoryPostByPaginationPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceCategoryPostByPaginationPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceCategoryPostByPaginationPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceCategoryPostByPaginationPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCategoryPostByPaginationPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCategoryPostByPaginationPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewPostListPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCategoryPostByPaginationPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CategoryPostByPaginationPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCategoryPostByPaginationPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceCategoryPostByPaginationPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCategoryPostByPaginationPageResult(%+v)", *p)
}

type BlogServiceTagPostPageArgs struct {
	Request *page.PostListPageRequest `thrift:"request,1"`
}

func NewBlogServiceTagPostPageArgs() *BlogServiceTagPostPageArgs {
	return &BlogServiceTagPostPageArgs{}
}

var BlogServiceTagPostPageArgs_Request_DEFAULT *page.PostListPageRequest

func (p *BlogServiceTagPostPageArgs) GetRequest() (v *page.PostListPageRequest) {
	if !p.IsSetRequest() {
		return BlogServiceTagPostPageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceTagPostPageArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceTagPostPageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceTagPostPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceTagPostPageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceTagPostPageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = page.NewPostListPageRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceTagPostPageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TagPostPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceTagPostPageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceTagPostPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceTagPostPageArgs(%+v)", *p)
}

type BlogServiceTagPostPageResult struct {
	Success *page.PostListPageResp `thrift:"success,0,optional"`
}

func NewBlogServiceTagPostPageResult() *BlogServiceTagPostPageResult {
	return &BlogServiceTagPostPageResult{}
}

var BlogServiceTagPostPageResult_Success_DEFAULT *page.PostListPageResp

func (p *BlogServiceTagPostPageResult) GetSuccess() (v *page.PostListPageResp) {
	if !p.IsSetSuccess() {
		return BlogServiceTagPostPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceTagPostPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceTagPostPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceTagPostPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceTagPostPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceTagPostPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewPostListPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceTagPostPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TagPostPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceTagPostPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceTagPostPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceTagPostPageResult(%+v)", *p)
}

type BlogServiceTagPostByPaginationPageArgs struct {
	Request *page.PostListPageRequest `thrift:"request,1"`
}

func NewBlogServiceTagPostByPaginationPageArgs() *BlogServiceTagPostByPaginationPageArgs {
	return &BlogServiceTagPostByPaginationPageArgs{}
}

var BlogServiceTagPostByPaginationPageArgs_Request_DEFAULT *page.PostListPageRequest

func (p *BlogServiceTagPostByPaginationPageArgs) GetRequest() (v *page.PostListPageRequest) {
	if !p.IsSetRequest() {
		return BlogServiceTagPostByPaginationPageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServiceTagPostByPaginationPageArgs = map[int16]string{
	1: "request",
}

func (p *BlogServiceTagPostByPaginationPageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServiceTagPostByPaginationPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceTagPostByPaginationPageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceTagPostByPaginationPageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = page.NewPostListPageRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceTagPostByPaginationPageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TagPostByPaginationPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceTagPostByPaginationPageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServiceTagPostByPaginationPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceTagPostByPaginationPageArgs(%+v)", *p)
}

type BlogServiceTagPostByPaginationPageResult struct {
	Success *page.PostListPageResp `thrift:"success,0,optional"`
}

func NewBlogServiceTagPostByPaginationPageResult() *BlogServiceTagPostByPaginationPageResult {
	return &BlogServiceTagPostByPaginationPageResult{}
}

var BlogServiceTagPostByPaginationPageResult_Success_DEFAULT *page.PostListPageResp

func (p *BlogServiceTagPostByPaginationPageResult) GetSuccess() (v *page.PostListPageResp) {
	if !p.IsSetSuccess() {
		return BlogServiceTagPostByPaginationPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceTagPostByPaginationPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceTagPostByPaginationPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceTagPostByPaginationPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceTagPostByPaginationPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceTagPostByPaginationPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewPostListPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceTagPostByPaginationPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TagPostByPaginationPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceTagPostByPaginationPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceTagPostByPaginationPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceTagPostByPaginationPageResult(%+v)", *p)
}

type BlogServiceArchivesPageArgs struct {
}

func NewBlogServiceArchivesPageArgs() *BlogServiceArchivesPageArgs {
	return &BlogServiceArchivesPageArgs{}
}

var fieldIDToName_BlogServiceArchivesPageArgs = map[int16]string{}

func (p *BlogServiceArchivesPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceArchivesPageArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ArchivesPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceArchivesPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceArchivesPageArgs(%+v)", *p)
}

type BlogServiceArchivesPageResult struct {
	Success *page.ArchivesPageResp `thrift:"success,0,optional"`
}

func NewBlogServiceArchivesPageResult() *BlogServiceArchivesPageResult {
	return &BlogServiceArchivesPageResult{}
}

var BlogServiceArchivesPageResult_Success_DEFAULT *page.ArchivesPageResp

func (p *BlogServiceArchivesPageResult) GetSuccess() (v *page.ArchivesPageResp) {
	if !p.IsSetSuccess() {
		return BlogServiceArchivesPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceArchivesPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceArchivesPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceArchivesPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceArchivesPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceArchivesPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewArchivesPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceArchivesPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArchivesPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceArchivesPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceArchivesPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceArchivesPageResult(%+v)", *p)
}

type BlogServiceTagsPageArgs struct {
}

func NewBlogServiceTagsPageArgs() *BlogServiceTagsPageArgs {
	return &BlogServiceTagsPageArgs{}
}

var fieldIDToName_BlogServiceTagsPageArgs = map[int16]string{}

func (p *BlogServiceTagsPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceTagsPageArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("TagsPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceTagsPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceTagsPageArgs(%+v)", *p)
}

type BlogServiceTagsPageResult struct {
	Success *page.TermsPageResp `thrift:"success,0,optional"`
}

func NewBlogServiceTagsPageResult() *BlogServiceTagsPageResult {
	return &BlogServiceTagsPageResult{}
}

var BlogServiceTagsPageResult_Success_DEFAULT *page.TermsPageResp

func (p *BlogServiceTagsPageResult) GetSuccess() (v *page.TermsPageResp) {
	if !p.IsSetSuccess() {
		return BlogServiceTagsPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceTagsPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceTagsPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceTagsPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceTagsPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceTagsPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewTermsPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceTagsPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TagsPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceTagsPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceTagsPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceTagsPageResult(%+v)", *p)
}

type BlogServiceCategoriesPageArgs struct {
}

func NewBlogServiceCategoriesPageArgs() *BlogServiceCategoriesPageArgs {
	return &BlogServiceCategoriesPageArgs{}
}

var fieldIDToName_BlogServiceCategoriesPageArgs = map[int16]string{}

func (p *BlogServiceCategoriesPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCategoriesPageArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CategoriesPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCategoriesPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCategoriesPageArgs(%+v)", *p)
}

type BlogServiceCategoriesPageResult struct {
	Success *page.TermsPageResp `thrift:"success,0,optional"`
}

func NewBlogServiceCategoriesPageResult() *BlogServiceCategoriesPageResult {
	return &BlogServiceCategoriesPageResult{}
}

var BlogServiceCategoriesPageResult_Success_DEFAULT *page.TermsPageResp

func (p *BlogServiceCategoriesPageResult) GetSuccess() (v *page.TermsPageResp) {
	if !p.IsSetSuccess() {
		return BlogServiceCategoriesPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceCategoriesPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceCategoriesPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceCategoriesPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceCategoriesPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceCategoriesPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewTermsPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceCategoriesPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CategoriesPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceCategoriesPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceCategoriesPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceCategoriesPageResult(%+v)", *p)
}

type BlogServiceSearchPageArgs struct {
}

func NewBlogServiceSearchPageArgs() *BlogServiceSearchPageArgs {
	return &BlogServiceSearchPageArgs{}
}

var fieldIDToName_BlogServiceSearchPageArgs = map[int16]string{}

func (p *BlogServiceSearchPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceSearchPageArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("SearchPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceSearchPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceSearchPageArgs(%+v)", *p)
}

type BlogServiceSearchPageResult struct {
	Success *page.BasicPageResp `thrift:"success,0,optional"`
}

func NewBlogServiceSearchPageResult() *BlogServiceSearchPageResult {
	return &BlogServiceSearchPageResult{}
}

var BlogServiceSearchPageResult_Success_DEFAULT *page.BasicPageResp

func (p *BlogServiceSearchPageResult) GetSuccess() (v *page.BasicPageResp) {
	if !p.IsSetSuccess() {
		return BlogServiceSearchPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServiceSearchPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServiceSearchPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServiceSearchPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServiceSearchPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServiceSearchPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewBasicPageResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServiceSearchPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServiceSearchPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServiceSearchPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServiceSearchPageResult(%+v)", *p)
}

type BlogServicePostPageArgs struct {
	Request *page.PostPageRequest `thrift:"request,1"`
}

func NewBlogServicePostPageArgs() *BlogServicePostPageArgs {
	return &BlogServicePostPageArgs{}
}

var BlogServicePostPageArgs_Request_DEFAULT *page.PostPageRequest

func (p *BlogServicePostPageArgs) GetRequest() (v *page.PostPageRequest) {
	if !p.IsSetRequest() {
		return BlogServicePostPageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServicePostPageArgs = map[int16]string{
	1: "request",
}

func (p *BlogServicePostPageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServicePostPageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServicePostPageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServicePostPageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = page.NewPostPageRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServicePostPageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PostPage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServicePostPageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServicePostPageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServicePostPageArgs(%+v)", *p)
}

type BlogServicePostPageResult struct {
	Success *page.PostPageResponse `thrift:"success,0,optional"`
}

func NewBlogServicePostPageResult() *BlogServicePostPageResult {
	return &BlogServicePostPageResult{}
}

var BlogServicePostPageResult_Success_DEFAULT *page.PostPageResponse

func (p *BlogServicePostPageResult) GetSuccess() (v *page.PostPageResponse) {
	if !p.IsSetSuccess() {
		return BlogServicePostPageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServicePostPageResult = map[int16]string{
	0: "success",
}

func (p *BlogServicePostPageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServicePostPageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServicePostPageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServicePostPageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewPostPageResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServicePostPageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PostPage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServicePostPageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServicePostPageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServicePostPageResult(%+v)", *p)
}

type BlogServicePagePageArgs struct {
	Request *page.PagePageRequest `thrift:"request,1"`
}

func NewBlogServicePagePageArgs() *BlogServicePagePageArgs {
	return &BlogServicePagePageArgs{}
}

var BlogServicePagePageArgs_Request_DEFAULT *page.PagePageRequest

func (p *BlogServicePagePageArgs) GetRequest() (v *page.PagePageRequest) {
	if !p.IsSetRequest() {
		return BlogServicePagePageArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_BlogServicePagePageArgs = map[int16]string{
	1: "request",
}

func (p *BlogServicePagePageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BlogServicePagePageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServicePagePageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServicePagePageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = page.NewPagePageRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServicePagePageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PagePage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServicePagePageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlogServicePagePageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServicePagePageArgs(%+v)", *p)
}

type BlogServicePagePageResult struct {
	Success *page.PagePageResponse `thrift:"success,0,optional"`
}

func NewBlogServicePagePageResult() *BlogServicePagePageResult {
	return &BlogServicePagePageResult{}
}

var BlogServicePagePageResult_Success_DEFAULT *page.PagePageResponse

func (p *BlogServicePagePageResult) GetSuccess() (v *page.PagePageResponse) {
	if !p.IsSetSuccess() {
		return BlogServicePagePageResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_BlogServicePagePageResult = map[int16]string{
	0: "success",
}

func (p *BlogServicePagePageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlogServicePagePageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlogServicePagePageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlogServicePagePageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = page.NewPagePageResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BlogServicePagePageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PagePage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlogServicePagePageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlogServicePagePageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlogServicePagePageResult(%+v)", *p)
}
