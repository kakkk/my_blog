// Code generated by thriftgo (0.2.3). DO NOT EDIT.

package common

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type DeleteFlag int64

const (
	DeleteFlag_Exist  DeleteFlag = 0
	DeleteFlag_Delete DeleteFlag = 1
)

func (p DeleteFlag) String() string {
	switch p {
	case DeleteFlag_Exist:
		return "Exist"
	case DeleteFlag_Delete:
		return "Delete"
	}
	return "<UNSET>"
}

func DeleteFlagFromString(s string) (DeleteFlag, error) {
	switch s {
	case "Exist":
		return DeleteFlag_Exist, nil
	case "Delete":
		return DeleteFlag_Delete, nil
	}
	return DeleteFlag(0), fmt.Errorf("not a valid DeleteFlag string")
}

func DeleteFlagPtr(v DeleteFlag) *DeleteFlag { return &v }
func (p *DeleteFlag) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = DeleteFlag(result.Int64)
	return
}

func (p *DeleteFlag) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type RespCode int64

const (
	RespCode_Success        RespCode = 0
	RespCode_Fail           RespCode = 1
	RespCode_LoginFail      RespCode = 200001
	RespCode_HasExist       RespCode = 200002
	RespCode_ParameterError RespCode = 400000
	RespCode_Unauthorized   RespCode = 400100
	RespCode_InternalError  RespCode = 500000
)

func (p RespCode) String() string {
	switch p {
	case RespCode_Success:
		return "Success"
	case RespCode_Fail:
		return "Fail"
	case RespCode_LoginFail:
		return "LoginFail"
	case RespCode_HasExist:
		return "HasExist"
	case RespCode_ParameterError:
		return "ParameterError"
	case RespCode_Unauthorized:
		return "Unauthorized"
	case RespCode_InternalError:
		return "InternalError"
	}
	return "<UNSET>"
}

func RespCodeFromString(s string) (RespCode, error) {
	switch s {
	case "Success":
		return RespCode_Success, nil
	case "Fail":
		return RespCode_Fail, nil
	case "LoginFail":
		return RespCode_LoginFail, nil
	case "HasExist":
		return RespCode_HasExist, nil
	case "ParameterError":
		return RespCode_ParameterError, nil
	case "Unauthorized":
		return RespCode_Unauthorized, nil
	case "InternalError":
		return RespCode_InternalError, nil
	}
	return RespCode(0), fmt.Errorf("not a valid RespCode string")
}

func RespCodePtr(v RespCode) *RespCode { return &v }
func (p *RespCode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = RespCode(result.Int64)
	return
}

func (p *RespCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ExtraInfo int64

const (
	ExtraInfo_CategoryOrder ExtraInfo = 1
)

func (p ExtraInfo) String() string {
	switch p {
	case ExtraInfo_CategoryOrder:
		return "CategoryOrder"
	}
	return "<UNSET>"
}

func ExtraInfoFromString(s string) (ExtraInfo, error) {
	switch s {
	case "CategoryOrder":
		return ExtraInfo_CategoryOrder, nil
	}
	return ExtraInfo(0), fmt.Errorf("not a valid ExtraInfo string")
}

func ExtraInfoPtr(v ExtraInfo) *ExtraInfo { return &v }
func (p *ExtraInfo) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ExtraInfo(result.Int64)
	return
}

func (p *ExtraInfo) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ArticleType int64

const (
	ArticleType_Post ArticleType = 1
	ArticleType_Page ArticleType = 2
)

func (p ArticleType) String() string {
	switch p {
	case ArticleType_Post:
		return "Post"
	case ArticleType_Page:
		return "Page"
	}
	return "<UNSET>"
}

func ArticleTypeFromString(s string) (ArticleType, error) {
	switch s {
	case "Post":
		return ArticleType_Post, nil
	case "Page":
		return ArticleType_Page, nil
	}
	return ArticleType(0), fmt.Errorf("not a valid ArticleType string")
}

func ArticleTypePtr(v ArticleType) *ArticleType { return &v }
func (p *ArticleType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ArticleType(result.Int64)
	return
}

func (p *ArticleType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ArticleStatus int64

const (
	ArticleStatus_DRAFT   ArticleStatus = 1
	ArticleStatus_PUBLIST ArticleStatus = 2
	ArticleStatus_OFFLINE ArticleStatus = 3
	ArticleStatus_DELETE  ArticleStatus = 4
)

func (p ArticleStatus) String() string {
	switch p {
	case ArticleStatus_DRAFT:
		return "DRAFT"
	case ArticleStatus_PUBLIST:
		return "PUBLIST"
	case ArticleStatus_OFFLINE:
		return "OFFLINE"
	case ArticleStatus_DELETE:
		return "DELETE"
	}
	return "<UNSET>"
}

func ArticleStatusFromString(s string) (ArticleStatus, error) {
	switch s {
	case "DRAFT":
		return ArticleStatus_DRAFT, nil
	case "PUBLIST":
		return ArticleStatus_PUBLIST, nil
	case "OFFLINE":
		return ArticleStatus_OFFLINE, nil
	case "DELETE":
		return ArticleStatus_DELETE, nil
	}
	return ArticleStatus(0), fmt.Errorf("not a valid ArticleStatus string")
}

func ArticleStatusPtr(v ArticleStatus) *ArticleStatus { return &v }
func (p *ArticleStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ArticleStatus(result.Int64)
	return
}

func (p *ArticleStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
